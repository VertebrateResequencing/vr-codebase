#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use VertRes::Parser::LSF;
use IPC::Open3 'open3';
use IO::Select;

my $opts = parse_params();
crawl($opts);
plot_stats($opts);

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "About: The script attempts to find all LSF output files and gives overall stats\n",
        "   about total runtime and memory.\n",
        "Usage: runtime-stats [OPTIONS]\n",
        "Options:\n",
        "   -d, --dir <dir>                 Where to look for output files.\n",
        "   -p, --plot <prefix>             Create plots\n",
        "   -s, --suffix <string>           How to recognise LSF output files [.o]\n",
        "   -t, --table                     Produce table-like output, one line per job\n",
        "   -h, -?, --help                  This help message.\n",
        "\n";
}


sub parse_params
{
    my $opts = { suffix=>'.o' };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-t' || $arg eq '--table' ) { $$opts{table}=1; next }
        if ( $arg eq '-d' || $arg eq '--dir' ) { push @{$$opts{dir}},shift(@ARGV); next }
        if ( $arg eq '-p' || $arg eq '--plot' ) { $$opts{plot}=shift(@ARGV); next }
        if ( $arg eq '-s' || $arg eq '--suffix' ) { $$opts{suffix}=shift(@ARGV); next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        if ( -e $arg ) { push @{$$opts{dir}},$arg; next; }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{dir}) ) { error("Missing the -d option.\n") }
    return $opts;
}

sub crawl
{
    my ($opts) = @_;
    my @files;
    for my $dir (@{$$opts{dir}})
    {
        my $cmd = qq[find $dir -name \\*$$opts{suffix}];
        my @tmp = grep { chomp } `$cmd`;
        push @files,@tmp;
    }

    my ($kid_in,$kid_out,$kid_err);
    my $pid = open3($kid_in,$kid_out,$kid_err,'-');
    if ( !defined $pid ) { error("Cannot fork: $!"); }

    if ($pid)
    {
        my $sel = new IO::Select;
        $sel->add($kid_out,$kid_err);

        while(my @ready = $sel->can_read) 
        {
            foreach my $fh (@ready) 
            {
                my $line = <$fh>; 
                if (not defined $line) 
                {
                    $sel->remove($fh); 
                    next;         
                }
                print_or_discard_line($opts,$line);
            }
        }
    } 
    else 
    {
        for my $f (@files)
        {
            get_stats($opts,$f);
        }
        report_stats($opts);
        if ( !scalar @files ) { warn("No LSF output files found.\n"); }
    }
}

sub print_or_discard_line
{
    my ($opts,$line) = @_;
    if ( $line=~/^No records in the LSF output file/ ) { return; }
    print $line;
}

sub get_stats
{
    my ($opts,$file) = @_;

    # TODO: include also running time of failed jobs as a separate stats?
    my $parser = VertRes::Parser::LSF->new(file=>$file);
    my $n = $parser->nrecords();
    if ( !$n ) { return; }

    my @keys = qw(memory time cpu_time idle_factor start_time end_time);
    if ( $$opts{table} )
    {
        if ( !exists($$opts{header_printed}) )
        {
            print "#file\t", join("\t",'attempts',@keys), "\n";
            $$opts{header_printed} = 1;
        }
        print "$file\t$n";
    }

    push @{$$opts{stats}{attempts}},$n;
    for my $key (@keys)
    {
        my $value = $parser->get($key,$n-1);
        if ( !defined $value ) { next; }
        push @{$$opts{stats}{$key}},$value;
        if ( $$opts{table} ) { print "\t$value"; }
    }
    if ( $$opts{table} ) { print "\n"; } 
}

sub report_stats
{
    my ($opts) = @_;
    if ( $$opts{table} ) { return; }

    my ($min_start,$max_end);
    while (my ($key,$values) = each %{$$opts{stats}})
    {
        if ( $key eq 'start_time' )
        {
            for my $val (@$values) { if ( !defined $min_start or $min_start>$val ) { $min_start = $val; } }
            next;
        }
        if ( $key eq 'end_time' )
        {
            for my $val (@$values) { if ( !defined $max_end or $max_end<$val ) { $max_end = $val; } }
            next;
        }

        my $n = scalar @$values;

        my $avg = 0;
        my $max = $$values[0];
        my $min = $$values[0];
        my $sum = 0;
        for my $value (@$values)
        {
            if ( $max<$value ) { $max=$value; }
            if ( $min>$value ) { $min=$value; }
            $avg += $value/$n;
            $sum += $value;
        }

        my $sd = 0;
        for my $value (@$values)
        {
            $sd += ($value - $avg)**2/$n;
        }
        $sd = sqrt($sd);

        printf "%-15sn=%d\tavg=%.1f\tmin=%.1f\tmax=%.1f\tSD=%.1f", $key,$n,$avg,$min,$max,$sd;
        if ( $key=~/time/ ) { printf "\ttotal=%.1fh",$sum/3600.; }
        print "\n";
    }
    printf "finished_in\t%.1fh\n", ($max_end-$min_start)/3600.;
}

sub plot_stats
{
    my ($opts) = @_;
    if ( !exists($$opts{plot}) ) { return; }

    plot($opts,'memory','Memory [MB]');
    plot($opts,'time','Time [s]');
    plot($opts,'attempts','Attempts');
}

sub plot
{
    my ($opts,$key,$label) = @_;

    if ( !exists($$opts{stats}{$key}) ) { return; }

    my $prefix = $$opts{plot}=~m{/$} ? "$$opts{plot}$key" : "$$opts{plot}-$key";
    open(my $fh,'>',"$prefix.gp") or error("$prefix.gp: $!");
    print $fh qq[
        set terminal png size 600,400 truecolor font "DejaVuSansMono,9"
        set output "$prefix.png"
        set ylabel 'Number of jobs'
        set y2label 'Cumulative number of jobs [%]'
        set xlabel '$label'
        set ytics nomirror
        set y2tics
        plot '-' with linespoints pt 12 ps 0.5 notitle, '-' axes x1y2  with linespoints pt 12 ps 0.5 notitle
        ];

    my %data;
    my $bin_size = 1;
    for my $val (@{$$opts{stats}{$key}})
    {
        my $bin = int($val/$bin_size);
        $data{$bin}++;
    }

    my $nvals = @{$$opts{stats}{$key}};
    for my $i (sort {$a<=>$b} keys %data)
    {
        print $fh $i*$bin_size,"\t",$data{$i},"\n";
    }
    print $fh "end\n";

    my $sum;
    for my $i (sort {$a<=>$b} keys %data)
    {
        $sum += $data{$i};
        print $fh $i*$bin_size,"\t",$sum*100./$nvals,"\n";
    }
    print $fh "end\n";
    close($fh);

    system("GDFONTPATH=/usr/share/fonts/truetype/ttf-dejavu/ gnuplot $prefix.gp");
}

