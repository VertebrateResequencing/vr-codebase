#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;
use Vcf;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{do_clean} = 1;
    $$self{debug_chunks} = 0;
    $$self{limits} = { memory=>5_000, runtime=>24*60 };
    $$self{tabix}       = '/software/vertres/bin-external/tabix-exp-rc';
    $$self{bcftools}    = '/software/vertres/bin-external/bcftools-exp-rc';
    $$self{bcftools_plugins} = '/nfs/users/nfs_p/pd3/git/bcftools/plugins-xxx';
    $$self{htslib_so}   = '/software/vertres/bin-external/samtools-current-exp-rc/lib/libhts.so.1';
    $$self{beagle_jar}  = '/nfs/users/nfs_p/pd3/sandbox/svn/beagle/b4.r1398.jar';
    $$self{beagle_args} = '';
    $$self{beagle_tags} = 'INFO,FORMAT';
    $$self{java_exec}   = '/software/jdk1.7.0_71/bin/java';
    $$self{java_args}   = '';
    $$self{phased_concat_args} = '';
    $$self{memstep} = 2_000;
    $$self{config_version} = '1413467786';
    $$self{max_chr_len}   = 249250621;
    $$self{redo_beagle} = 0;
    $$self{_sampleconf} = q[
            # For sanity checking that your config file is not obsolete. Update the version key in your 
            #  config file to get rid of the warnings.
            #
            # What changed since version:
            #   1356084361 .. Using "bcftools concat" instead of "vcf-phased-join"
            #   1413467786 .. Using "bcftools annotate" and "bcftools +fixploidy"
            #
            version  => '] .$$self{config_version}. q[',

            beagle_jar  => '] .$$self{beagle_jar}. q[',
            beagle_args => '',
            beagle_tags => '] .$$self{beagle_tags}. q[',    # bcftools annotate -c args: all INFO,FORMAT tag
            java_exec   => '] .$$self{java_exec}. q[',
            java_args   => '',
            bcftools    => '] .$$self{bcftools}. q[',
            htslib_so   => '] .$$self{htslib_so}. q[',
            bcftools_plugins   => '] .$$self{bcftools_plugins}. q[',
            phased_concat_args => '] .$$self{phased_concat_args}. q[',

            # The known_vcf (aka -k) and in_vcf (aka -i) file names can contain the string "{CHROM}" which will be expanded 
            #   according to chromosomes listed in the "region" key below. If the key is not defined, glob expansion will
            #   be used to obtain the chromosomes. The VCFs must be tabix indexed. Note that Beagle requires phased
            #   known_vcf and the samples in known_vcf must not overlap the input samples.
            # When known_vcf is set, consider also setting the chunk_by_known key.
            #
            # in_vcf     => '/some/path/chr{CHROM}.vcf.gz',
            # known_vcf  => '/nfs/users/nfs_p/pd3/sandbox/impute2/dec-chr20/Omni25_genotypes_1212_samples_v2.b37.vcf.gz',

            # If supplied, vcf check will be run to evaluate the performance
            # eval_vcf => undef,

            # Number of sites per chunk and in buffer regions. The total number of sites considered is buffer_nsites+chunk_nsites.
            #   The chunks are determined based on the input VCF (-i) unless chunk_by_known is set. 
            buffer_nsites  => 1_000,
            chunk_nsites   => 3_000,
            chunk_by_known => 0,
            max_chr_len    => ] .$$self{max_chr_len}. q[,

            # Indels usually have high false positives rate
            exclude_multiallelic_indels => 0,

            # If unset, imputed sites from known_vcf which are not present in in_vcf will not be printed on output. 
            #   This is useful when performing genotype refinement and the number of sites should stay unchanged.
            do_impute  => 1,

            # No imputation or genotype, only genotype refinement. Run with gt=
            #   and leaves off gl=. Consider adding to 'beagle_args' the
            #   options gprobs=false (no posterior genotype probabilities) or
            #   phase-its= to increase phasing accuracy (the default is phase-its=5).
            do_phasing => 0,

            # Create whole-genome VCF? This can produce *huge* files for thousands of samples
            merge_chroms   => 0,

            # Regions to impute, the chunks must be sorted by chromosomal position or else the resulting VCF will not
            #   be sorted. By default, the whole VCF is imputed.
            # region => [ '1:159000000-161000000', '1:62000000-64000000', '2' ],

            limits   => { memory=>10_000, runtime=>24*60 },
            # How much memory should be given to Beagle in the next run if it fails because of out-of-memory error?
            #   Smaller step saves farm node's memory but can result in multiple runs (note that it can take
            #   considerable amount of CPU time before the memory is exhausted). On the other hand, bigger step may 
            #   block free CPUs on multi-core nodes by reserving too much memory.
            memstep  => '] .$$self{memstep}. q[',   # the step for increasing memory limit

            save_beagle_outputs => 0,   # If set, raw output files from beagle will not be removed (for debugging)

            do_clean => 1,         # Remove runner's temporary files
    ]."\n";

    $$self{usage} .= 
        "Usage: run-beagle\n" .
        "Options:\n" .
        "   -i, --impute-vcf <file>             The target VCF file to be imputed or genotypes refined\n" .
        "   -m, --mrProper                      Clean all intermediate files, including Impute2 output files, leaving only top-level VCFs\n" .
        "   -o, --outdir <dir>                  Output directory\n" .
        "   -r, --region <chr|chr:from-to>      Run imputation in the given region only\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-m' or $arg eq '--mrProper' ) { $$self{mrProper}=1; next; }
        if ( $arg eq '-r' or $arg eq '--region' ) { $$self{region}=shift(@ARGV); next; }
        if ( $arg eq '-i' or $arg eq '--impute-vcf' ) { $$self{in_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-k' or $arg eq '--known-vcf' ) { $$self{known_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }

    if ( !exists($$self{outdir}) ) { $self->throw("Missing the -o option.\n"); }
    if ( !exists($$self{in_vcf}) ) { $self->throw("Missing the -i option.\n"); }
    $$self{chunk_file} = "$$self{outdir}/chunks.txt";
    if ( $$self{mrProper} )
    {
        $self->mrProper($$self{outdir});
        $self->all_done;
    }
    if ( !exists($$self{version}) or $$self{version} ne $$self{config_version} )
    {
        $self->warn("Warning: Your config file may be out of date, the latest version key is \"$$self{config_version}\". Please run with +sampleconf to see what changed.\n");
    }
    if ( exists($$self{known_vcf}) && !($$self{known_vcf}=~/.gz$/) )
    {
        $self->warn("The known_vcf should be bgzipped and tabix indexed. Hopefully you know what you're doing?\n");
    }
    if ( exists($$self{buffer_region}) or exists($$self{chunk_size}) )  
    { 
        $self->throw("The keys buffer_region and chunk_size are deprecated, please use buffer_nsites and chunk_nsites instead."); 
    }
    if ( !exists($$self{buffer_nsites}) ) 
    { 
        $self->throw("Missing the key buffer_nsites"); 
    }
    if ( !exists($$self{chunk_nsites}) ) 
    { 
         $self->throw("Missing the key chunk_nsites");
    }
    if ( $$self{chunk_by_known} && !exists($$self{known_vcf}) )
    {
        $self->throw("Expected the key \"known_vcf\" with \"chunk_by_known\".\n");
    }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();
    $self->save_config();

    my $outdir = $$self{outdir};

    $self->bcftools_sanity_check;

    my $chunks = $self->read_chunks();
    my $cpus = $self->num_threads($$self{beagle_args});
    for my $chunk (@$chunks)
    {
        $self->set_limits(%{$$self{limits}}, $cpus ? (cpus => $cpus) : ()) unless !exists($$self{limits});
        $self->spawn('beagle',"$outdir/$$chunk[0]/$$chunk[1]-$$chunk[2].done","$outdir/$$chunk[0]",$chunk);
    }
    $self->wait;

    # Convert to VCFs and concat
    if ( $$self{merge_chroms} ) 
    { 
        $self->set_limits(%{$$self{limits}},memory=>undef) unless !exists($$self{limits});
        $self->spawn('concat_vcfs',"$outdir/merged.vcf.gz",$chunks);
    }
    else
    {
        $self->set_limits(%{$$self{limits}},memory=>undef) unless !exists($$self{limits});
        my @chroms = $self->get_chroms($chunks);
        for my $chr (@chroms)
        {
            $self->spawn('concat_vcfs',"$outdir/$chr.vcf.gz",$chunks,$chr);
        }
    }
    $self->wait; 
    $self->set_limits(runtime=>undef);

    # Run performance stats and clean
    $self->spawn('runtime_stats',"$outdir/runtime");
    $self->wait;
    $self->clean($outdir) unless !$$self{do_clean};

    $self->all_done;
}

sub bcftools_sanity_check
{
    my ($self) = @_;
    if ( exists($$self{bcftools_plugins}) ) { $ENV{BCFTOOLS_PLUGINS} = $$self{bcftools_plugins}; }
    if ( exists($$self{htslib_so}) ) 
    { 
        my $ld_path = $$self{htslib_so};
        $ld_path =~ s{[^/]+$}{};
        $ENV{LD_LIBRARY_PATH} = exists($ENV{LD_LIBRARY_PATH}) ? "$ld_path:$ENV{LD_LIBRARY_PATH}" : $ld_path;

    }
    `$$self{bcftools} +fixploidy -h 2>&1`;
    if ( $? )
    {
        my @out = `$$self{bcftools} plugin -lv`;
        $self->throw(
            "\n-----------------------------------------------------------------------------------------------------------\n",
            @out, 
            "\n-----------------------------------------------------------------------------------------------------------\n" .
            "\nCould not run \"bcftools +fixploidy -h\". Are these environment variables correct, is libhts.so accessible?\n" .
            "\tBCFTOOLS_PLUGINS=$ENV{BCFTOOLS_PLUGINS}\n" .
            "\tLD_LIBRARY_PATH=$ENV{LD_LIBRARY_PATH}\n" .
            "\n-----------------------------------------------------------------------------------------------------------\n\n\n"
            );
    }
}

sub num_threads
{
    my ($self,$opts) = @_;
    my ($cpus) = $opts =~ m/nthreads=(\d+)/;
    return $cpus;
}

sub mrProper
{
    my ($self,$outdir) = @_;
    my $chunks = $self->read_chunks();
    my %chroms = ();
    for my $chunk (@$chunks) { $chroms{$$chunk[0]} = 1; }
    for my $chr (keys %chroms)
    {
        $self->cmd("rm -rf $outdir/$chr");
    }
    $self->SUPER::clean($outdir);
}

sub runtime_stats
{
    my ($self,$outfile) = @_;
    $self->cmd("mkdir -p $outfile.part");
    $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub read_chunks
{
    my ($self) = @_;
    if ( !-e $$self{chunk_file} ) 
    { 
        my $in_file = $$self{chunk_by_known} ? $$self{known_vcf} : $$self{in_vcf};
        my @regions = $self->define_regions($in_file);
        for my $region (@regions)
        {
            $self->spawn('define_chunks',"$$self{chunk_file}.$region",$in_file,$region);
        }
        $self->wait;

        $self->cmd("> $$self{chunk_file}.part");
        for my $region (@regions)
        {
            $self->cmd("cat $$self{chunk_file}.$region >> $$self{chunk_file}.part");
        }
        rename("$$self{chunk_file}.part",$$self{chunk_file}) or $self->throw("rename $$self{chunk_file}.part $$self{chunk_file}: $!");
        for my $region (@regions)
        {
            unlink("$$self{chunk_file}.$region");
        }
    }
    open(my $fh,'<',$$self{chunk_file}) or $self->throw("$$self{chunk_file}: $!");
    my @chunks;
    while (my $line=<$fh>)
    {
        chomp($line);
        my @items = split(/\t/,$line);
        push @chunks, [@items];
    }
    close($fh) or $self->throw("$$self{chunk_file}: $!");
    return \@chunks;
}

sub define_chunks
{
    my ($self,$outfile,$in_file,$region) = @_;
    my $tot_sites = $$self{buffer_nsites} + $$self{chunk_nsites};
    my (@chunks,@buffer);
    my $file = $self->expand_chrom($in_file,$region);
    my $cmd  = "$$self{tabix} $file $region |";
    open(my $in,$cmd) or $self->throw("$cmd: $!");
    while (my $line=<$in>)
    {
        if ( substr($line,0,1) eq '#' ) { next; }
        my $i = index($line,"\t");
        if ( $i<0 ) { $self->throw("Could not parse the line [CHR]: $line"); }
        my $chr = substr($line,0,$i);
        my $j = index($line,"\t",$i+1);
        if ( $j<0 ) { $self->throw("Could not parse the line [POS]: $line"); }
        my $pos = substr($line,$i+1,$j-$i-1);

        if ( @buffer && $buffer[0][0] ne $chr or @buffer>$tot_sites )
        {
            my $chr_from = $buffer[0][0];
            my $pos_from = $buffer[0][1];
            my $pos_to   = $buffer[-1][1];
            my $nout     = @buffer;
            push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
            if ( $$self{chunk_nsites}<@buffer ) { splice(@buffer,0,$$self{chunk_nsites}); }
            else { @buffer = (); }
        }
        push @buffer, [$chr,$pos];
    }
    if ( @buffer )
    {
        my $chr_from = $buffer[0][0];
        my $pos_from = $buffer[0][1];
        my $pos_to   = $buffer[-1][1];
        my $nout     = @buffer;
        push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
    }
    close($in) or $self->throw("close $cmd");

    if ( !@chunks ) { $self->throw("No chunks defined?\n"); }
    if ( @chunks>1 && $chunks[-1]{n} < $tot_sites*0.75 && $chunks[-1]{chr} eq $chunks[-2]{chr} )
    {
        my $chunk = splice(@chunks,-1,1);
        $chunks[-1]{to} = $$chunk{to};
        $chunks[-1]{n} += $$chunk{n};
    }

    if ( !($region=~/:/) )
    {
        # Whole genome or whole chromosome was requested. When on a new
        # chromosome, expand the first and last record to accompany
        # sites which may be present only in one (known_vcf vs in_vcf)
        for (my $i=0; $i<@chunks; $i++)
        {
            if ( $i==0 ) { $chunks[0]{from} = 0; next; }
            if ( $chunks[$i]{chr} ne $chunks[$i-1]{chr} )
            {
                $chunks[$i-1]{to} = $$self{max_chr_len};
                $chunks[$i]{from} = 0;
            }
        }
        $chunks[-1]{to} = $$self{max_chr_len};
    }

    open(my $out,'>',"$outfile.part") or $self->throw("$outfile.part: $!");
    for my $chunk (@chunks)
    {
        print $out "$$chunk{chr}\t$$chunk{from}\t$$chunk{to}\t$$chunk{n}\n";
    }
    close($out) or $self->throw("close $outfile.part");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub get_chroms
{
    my ($self,$regions) = @_;
    my %chroms;
    for my $reg (@$regions) 
    { 
        $chroms{$$reg[0]} = 1; 
    }
    return ( sort keys %chroms );
}

sub expand_chrom
{
    my ($self,$path,$region) = @_;
    if ( !defined $region ) { return $path; }
    $region =~ s/:.*$//;
    $path =~ s/{CHROM}/$region/g;
    return $path;
}

sub define_regions
{
    my ($self,$path) = @_;
    if ( exists($$self{region}) ) { return @{$$self{region}}; }
    if ( !($path=~/{CHROM}/) ) 
    { 
        my @chrs = grep { chomp } $self->cmd("$$self{tabix} -l $path");
        return @chrs;
    }
    my $before = $`;
    my $after  = $';
    $path =~ s/{CHROM}/*/;  # only one occurance of {CHROM} is allowed in this implementation
    my @list = glob($path);
    if ( !@list ) { $self->throw("No such file(s): $path"); }
    my @regs;
    for my $file (@list)
    {
        $file =~ s{^$before}{};
        $file =~ s{$after$}{};
        push @regs,$file;
    }
    return @regs;
}

sub create_vcf_chunk
{
    my ($self,$in_vcf,$out_vcf,$chr,$from,$to) = @_;

    # Force ploidy of 2 for all samples, beagle 
    open(my $fh,'>',"$out_vcf.ploidy") or $self->throw("$out_vcf.ploidy: $!");
    print $fh "Z 1 100 X 2\n";
    close($fh);

    my $ma = $$self{exclude_multiallelic_indels} ? '-m2 -M2' : '';
    $self->cmd("$$self{bcftools} view $ma -r $chr:$from-$to $in_vcf -Ou | $$self{bcftools} +fixploidy -- -p $out_vcf.ploidy | gzip -c > $out_vcf.part");

    unlink("$out_vcf.ploidy");
    rename("$out_vcf.part",$out_vcf) or $self->throw("rename $out_vcf.part $out_vcf: $!");
}

sub beagle
{
    my ($self,$outfile,$outdir,$chunk) = @_;
    my $prefix = "$outdir/$$chunk[1]-$$chunk[2]";
    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    my $in_vcf    = $self->expand_chrom($$self{in_vcf},$chr);
    my $known_vcf = exists($$self{known_vcf}) ? $self->expand_chrom($$self{known_vcf},$chr) : undef;

    if ( !-e "$prefix.vcf.gz" or $$self{redo_beagle} )
    {
        $self->cmd(qq[mkdir -p $outdir]);
        my $mem = $self->get_limits('memory') * 0.8;
        if ( $mem<=0 ) { $mem = 500; }
        my $known = defined $known_vcf ? "ref=$known_vcf" : '';
        if ( $known ne '' )
        {
            $self->create_vcf_chunk($known_vcf,"$prefix.ref.vcf.gz",$chr,$from,$to);
            $known  = "ref=$prefix.ref.vcf.gz";
            $known .= $$self{do_impute} ? ' impute=true' : ' impute=false';
        }
        my $action = $$self{do_phasing} ? "gt=$prefix.in.vcf.gz" : "gl=$prefix.in.vcf.gz";
        $self->create_vcf_chunk($in_vcf,"$prefix.in.vcf.gz",$chr,$from,$to);
        $self->java_cmd(qq[$$self{java_exec} -Xms${mem}m -Xmx${mem}m $$self{java_args} -jar $$self{beagle_jar} $$self{beagle_args} $known $action out=$prefix.part >>$outfile.o],"$outfile.e");
        if ( -s "$outfile.e" ) { $self->throw("Expected empty error file: $outfile.e"); }
        rename("$prefix.part.vcf.gz","$prefix.vcf.gz") or $self->throw("rename $prefix.part.vcf.gz $prefix.vcf.gz: $!");
        unlink("$prefix.in.vcf.gz");
        unlink("$prefix.ref.vcf.gz");
    }

    $self->cmd("$$self{bcftools} index $prefix.vcf.gz");    # workaround: beagle does not include the contig tag, index instead
    $self->cmd("$$self{bcftools} view -Ob -o $prefix.bgl.bcf $prefix.vcf.gz");
    $self->cmd("$$self{bcftools} index $prefix.bgl.bcf");
    $self->cmd(qq[$$self{bcftools} annotate -c $$self{beagle_tags} -a $prefix.bgl.bcf -r $chr:$from-$to $in_vcf -Ou | $$self{bcftools} +fill-AN-AC -Ob -o $prefix.bcf]);
    $self->cmd(qq[$$self{bcftools} index $prefix.bcf]);
    unlink("$prefix.bgl.bcf");
    unlink("$prefix.bgl.bcf.csi");
    if ( $$self{save_beagle_outputs} )
    {
        rename("$prefix.vcf.gz","$prefix.raw-beagle.vcf.gz"); 
        rename("$prefix.vcf.gz.csi","$prefix.raw-beagle.vcf.gz.csi"); 
    }
    else
    {
        # delete raw beagle output
        unlink("$prefix.vcf.gz");
        unlink("$prefix.vcf.gz.csi");
    }
    $self->cmd(qq[touch $outfile]);
}

sub concat_vcfs
{
    my ($self,$outfile,$chunks,$chr) = @_;
    open(my $fh,'>',"$outfile.list") or $self->throw("$outfile.list: $!");
    for my $chunk (@$chunks)
    {
        if ( defined $chr && $$chunk[0] ne $chr ) { next; }
        my $file = "$$self{outdir}/$$chunk[0]/$$chunk[1]-$$chunk[2].bcf";
        print $fh $file, "\n";
    }
    close($fh);
    $self->cmd(qq[$$self{bcftools} concat $$self{phased_concat_args} -lf $outfile.list -Oz -o $outfile.part]);
    $self->tabix_part($outfile);

    # clean
    for my $chunk (@$chunks)
    {
        if ( defined $chr && $$chunk[0] ne $chr ) { next; }
        my $file = "$$self{outdir}/$$chunk[0]/$$chunk[1]-$$chunk[2].bcf";
        unlink("$file.csi");
        unlink($file);
    }

    if ( !defined($$self{eval_vcf}) )
    {
        rename("$outfile.part",$outfile);
        return;
    }

    rename("$outfile.part","$outfile.tmp.vcf.gz");
    rename("$outfile.tbi","$outfile.tmp.vcf.gz.tbi");
    my $args = defined $chr ? "-r $chr" : '';
    my $eval_vcf = $self->expand_chrom($$self{eval_vcf},$chr);
    $self->cmd(qq[$$self{bcftools} stats $args -s - $eval_vcf $outfile.tmp.vcf.gz > $outfile.vchk]);
    rename("$outfile.tmp.vcf.gz.tbi","$outfile.tbi");
    rename("$outfile.tmp.vcf.gz","$outfile");
}

sub tabix_part
{
    my ($self,$vcf) = @_;
    $self->cmd("$$self{tabix} -p vcf -f $vcf.part");
    rename("$vcf.part.tbi","$vcf.tbi");
}

sub save_config
{
    my ($self) = @_;
    my $src = $$self{_config};
    my $dst = "$$self{outdir}/beagle.conf";
    if ( -e $dst && (stat($src))[9] <= (stat($dst))[9] ) { return; }
    if ( !-d $$self{outdir} ) { $self->cmd("mkdir -p $$self{outdir}"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    $self->cmd("cat $src >> $dst");
}

sub cmd
{
    my ($self,$cmd) = @_;
    return Utils::CMD($cmd,{verbose=>1});
}
sub java_cmd
{
    my ($self,$cmd,$err_file) = @_;

    print STDERR "$cmd 2>$err_file\n";
    if ( -e $err_file ) { `cat $err_file >> $err_file.prev`; unlink($err_file); }

    `$cmd 2>$err_file`;
    if ( ! $? ) { return; } # finished OK

    # something went wrong
    my $out_of_memory = 0;
    open(my $fh,'<',$err_file) or $self->throw("$err_file: $!");
    while (my $line=<$fh>)
    {
        if ( $line=~/java.lang.OutOfMemoryError/ ) { $out_of_memory = 1; last; }
        if ( $line=~/Could not create the Java virtual machine/ ) { $out_of_memory = 1; last; }
    }
    close($fh);
    if ( !$out_of_memory ) { $self->throw("The command failed: $cmd\n"); }

    # out of memory: tell the runner to use more memory next time
    my $mem = $self->get_limits('memory') + $$self{memstep};
    $self->set_limits(memory=>$mem);

    $self->throw("Memory limit exceeded, increasing the memory limit for the next run to $mem. The command was:\n$cmd\n");
}


