#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{debug_chunks} = 0;
    $$self{limits} = { memory=>5_000, runtime=>24*60 };
    $$self{_sampleconf} = q[
            beagle_jar  => '/nfs/users/nfs_p/pd3/sandbox/svn/beagle/beagle.jar',
            fai_ref     => '/lustre/scratch105/projects/g1k/ref/main_project/human_g1k_v37.fasta.fai',
            known_vcf   => '/nfs/users/nfs_p/pd3/sandbox/impute2/dec-chr20/Omni25_genotypes_1212_samples_v2.b37.vcf.gz',

            chunks_overlap  => 500,
            chunk_size      => 1_000_000,
            debug_chunks    => 0,

            limits  => { memory=>5_000, runtime=>24*60 },
    ]."\n";

    $$self{usage} .= 
        "Usage: run-beagle\n" .
        "Options:\n" .
        "   -i, --impute-vcf <file>             The target VCF file to be imputed or genotypes refined\n" .
        "   -o, --outdir <dir>                  Output directory\n" .
        "   -r, --region <chr|chr:from-to>      Run imputation in the given region only\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-r' or $arg eq '--region' ) { $$self{region}=shift(@ARGV); next; }
        if ( $arg eq '-i' or $arg eq '--impute-vcf' ) { $$self{in_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-k' or $arg eq '--known-vcf' ) { $$self{known_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        if ( $arg eq '-s' or $arg eq '--chunk-size' ) { $$self{chunk_size}=shift(@ARGV); next; }
        $self->throw();
    }

    if ( !exists($$self{outdir}) ) { $self->throw("Missing the -o option.\n"); }
    if ( !exists($$self{in_vcf}) ) { $self->throw("Missing the -i option.\n"); }
    if ( !exists($$self{known_vcf}) ) { $self->throw("Missing the known_vcf config key or -k option.\n"); }
    if ( !exists($$self{chunks_overlap}) ) 
    { 
        $$self{chunks_overlap} = 500;
        $self->warn("The 'chunks_overlap' config key not present, assuming: $$self{chunks_overlap}\n"); 
    }
    if ( !exists($$self{chunk_size}) ) 
    { 
        $$self{chunk_size} = 1_000_000;
        $self->warn("The 'chunk_size' config key not present, assuming: $$self{chunk_size}\n"); 
    }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();

    my $outdir = $$self{outdir};

    # Convert from VCFs to Beagle
    my $regions = $self->regions();
    for my $region (@$regions)
    {
        my $chunks = $self->chr_chunks($$self{chunk_size},[$region]);
        for my $chunk (@$chunks)
        {
            $self->spawn('vcf_to_beagle',"$outdir/$region/$chunk.01.vcf_to_beagle.done","$outdir/$region",$chunk);
        }
    }
    $self->wait;

    # Run Beagle on all chunks
    $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
    for my $region (@$regions)
    {
        if ( $self->is_finished("$outdir/$region/02.beagle.done") ) { next; }

        my $chunks = $self->chr_chunks($$self{chunk_size},[$region]);
        for my $chunk (@$chunks)
        {
            $self->spawn('beagle',"$outdir/$region/$chunk.02.beagle.done","$outdir/$region",$chunk);
        }
    }
    $self->set_limits(memory=>undef,runtime=>undef);
    $self->wait;

    # Convert to VCFs and concat
    if ( !$self->is_finished("$outdir/03.merged.vcf.gz") ) 
    {
        my @all_chunks;
        for my $region (@$regions)
        {
            my $chunks = $self->chr_chunks($$self{chunk_size},[$region]);
            for my $chunk (@$chunks)
            {
                $self->spawn('beagle_to_vcf',"$outdir/$region/03.vcfs.$chunk.vcf.gz","$outdir/$region",$chunk);
                push @all_chunks, "$outdir/$region/03.vcfs.$chunk.vcf.gz";
            }
        }
        $self->wait;

        $self->set_limits(runtime=>24*60);
        $self->spawn('concat_vcfs',"$outdir/03.merged.vcf.gz",@all_chunks);
        $self->wait;
        $self->set_limits(runtime=>undef);
    }

    $self->all_done;
}

sub regions
{
    my ($self) = @_;
    if ( exists($$self{region}) ) { return [ $$self{region} ]; }
    my (@in_list) = grep { chomp } $self->cmd(qq[tabix -l $$self{in_vcf}]);
    return \@in_list;
}

sub vcf_to_beagle
{
    my ($self,$outfile,$outdir,$region) = @_;
    $self->cmd(qq[mkdir -p $outdir]);
    $self->cmd(qq[vcf-beagle -r $region -i $$self{in_vcf} -k $$self{known_vcf} -o $outdir/$region.01 >$outfile.o 2>$outfile.e && touch $outfile]);
}

sub beagle
{
    my ($self,$outfile,$outdir,$region) = @_;
    if ( ! -s "$outdir/$region.01.markers" or ! -s "$outdir/$region.01.markers.known" or ! -s "$outdir/$region.01.markers.impute" )
    {
        # The region is empty
        $self->cmd("touch $outfile");
        return;
    }
    my $mem  = $self->get_limits('memory');
    if ( !$mem ) { $mem = 100; }
    $self->cmd(qq[java -Xmx${mem}m -jar $$self{beagle_jar} markers=$outdir/$region.01.markers like=$outdir/$region.01.impute_haps.gz unphased=$outdir/$region.01.known_haps.gz missing=? out=$outdir/$region.02 >$outfile.o 2>$outfile.e && touch $outfile]);
}

sub beagle_to_vcf
{
    my ($self,$outfile,$outdir,$region) = @_;
    if ( ! -s "$outdir/$region.01.markers" )
    {
        # The region is empty
        $self->cmd("touch $outfile");
        return;
    }
    $self->cmd(qq[vcf-beagle -r $region -i $$self{in_vcf} -o $outdir/$region.02.$region.01.impute_haps.gz.gprobs.gz 2>$outfile.e | bgzip -c > $outfile.part]);
    $self->tabix_part($outfile);
    rename("$outfile.part",$outfile);
}

sub concat_vcfs
{
    my ($self,$outfile,@files) = @_;
    open(my $fh,'>',"$outfile.list") or $self->throw("$outfile.list: $!");
    for my $file (@files)
    {
        # Check that the region is not empty
        if ( ! -s $file ) { next; }
        print $fh $file, "\n";
    }
    close($fh);
    $self->cmd(qq[vcf-concat -s 2 -f $outfile.list | bgzip -c > $outfile.part]);
    $self->tabix_part($outfile);
    rename("$outfile.part",$outfile);
}


sub tabix_part
{
    my ($self,$vcf) = @_;
    $self->cmd("tabix -p vcf -f $vcf.part");
    rename("$vcf.part.tbi","$vcf.tbi");
}

sub change_names
{
    my ($self,$args,@names) = @_;
    my %known = (prefix=>1,suffix=>1,rm_prefix=>1,rm_suffix=>1);
    for my $key (keys %$args)
    {
        if ( !exists($known{$key}) ) { $self->throw("No such argument to change_names: [$key]\n"); }
    }
    if ( exists($$args{prefix}) )
    {
        my $re = $$args{prefix};
        $re =~ s/\./\\./g;
        for (my $i=0; $i<@names; $i++)
        {
            if ( !($names[$i] =~ m{^$re}) ) { $names[$i] = $$args{prefix} . $names[$i]; }
        }
    }
    if ( exists($$args{suffix}) )
    {
        my $re = $$args{suffix};
        $re =~ s/\./\\./g;
        for (my $i=0; $i<@names; $i++)
        {
            if ( !($names[$i] =~ m{$re$}) ) { $names[$i] .= $$args{suffix}; }
        }
    }
    if ( exists($$args{rm_prefix}) )
    {
        my $re = $$args{rm_prefix};
        $re =~ s/\./\\./g;
        for (my $i=0; $i<@names; $i++)
        {
            $names[$i] =~ s{^$re}{};
        }
    }
    if ( exists($$args{rm_suffix}) )
    {
        my $re = $$args{rm_suffix};
        $re =~ s/\./\\./g;
        for (my $i=0; $i<@names; $i++)
        {
            $names[$i] =~ s{$re$}{};
        }
    }
    return @names;
}

sub cmd
{
    my ($self,$cmd) = @_;
    return Utils::CMD($cmd,{verbose=>1});
}

sub chr_chunks
{
    my ($self,$split_size,$region) = @_;

    my @chunks;
    my $regions = $self->read_chr_lengths($$self{fai_ref},$region);
    for my $region (@$regions)
    {
        my $chr     = $$region{name};
        my $pos     = $$region{from};
        my $end_pos = $$region{to};
        while ($pos<$end_pos)
        {
            my $from = $pos;
            my $to   = $from+$split_size-1;

            if ( $to>$end_pos ) { $to=$end_pos; }

            push @chunks, "$chr:$from-$to";

            $pos += $split_size - $$self{chunks_overlap};
            if ( $pos<1 ) { $self->throw("The split size too small [$split_size]?\n"); }

            if ( $$self{debug_chunks} && scalar @chunks>$$self{debug_chunks} ) { return \@chunks; }
        }
    }
    return \@chunks;
}

sub read_chr_lengths
{
    my ($self,$fai,$regions) = @_;

    my @regex;
    if ( defined $regions )
    {
        for my $region (@$regions)
        {
            if ( $region=~/^[^:]+$/ ) { push @regex,$region; }
        }
    }

    if ( !@regex ) 
    { 
        if ( $$self{fai_chr_regex}=~/^\^/ or $$self{fai_chr_regex}=~/\$$/ )
        {
            $self->throw("The regex must not contain [^\$], this will be appended automagically.\n");
        }
        push @regex, $$self{fai_chr_regex}; 
    }

    # Determine the chromosomes and their lengths
    open(my $fh,'<',$fai) or $self->throw("$fai: $!"); 
    my @chr_lengths;
    while (my $line=<$fh>)
    {
        for my $regex (@regex)
        {
            if ( !($line=~/^($regex)\t(\d+)/i) ) { next; }
            push @chr_lengths, {name=>$1, from=>1, to=>$2};
            last;
        }
    }
    close($fh);
    return \@chr_lengths;
}


