#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;

my $runner = myRunner->new();
$runner->run();

exit;

#--------------------------------

package myRunner;
use base qw(Runner);
use strict;
use warnings;

sub new
{
    my ($class,@args) = @_;
    my $self = $class->SUPER::new(@args);

    $$self{verbose}       = 1;
    $$self{do_clean}      = 1;
    $$self{limits}        = { memory=>5_500, runtime=>3*24*60 };
    $$self{impute2_bin}   = 'impute2';
    $$self{bcftools}      = '/software/vertres/bin-external/bcftools-exp-rc';
    $$self{tabix}         = '/software/vertres/bin-external/tabix-exp-rc';
    $$self{max_chr_len}   = 249250621;
    $$self{phased_concat_args} = '';
    $$self{in_GL_tag}     = 'PL';
    $$self{config_version} = '1411049246';
    $$self{_sampleconf} = q[
        # For sanity checking that your config file is not obsolete. Update the version key in your 
        #  config file to get rid of the warnings.
        #
        # What changed since version:
        #   1349789206 .. Using "bcftools concat" instead of "vcf-phased-join"
        #   1392388523 .. Support for -merge_ref_panels plus attempt to make the options more intuitive
        #   1411049246 .. Using "bcftools convert" instead of vcf-impute2
        #
        version  => '] .$$self{config_version}. q[',

        impute2_bin => '/nfs/users/nfs_p/pd3/sandbox/svn/impute2/impute2.3.1',
        gen_map     => '/nfs/users/nfs_p/pd3/sandbox/svn/impute2/ALL_1000G_phase1interim_jun2011_impute/genetic_map_chr{CHROM}_combined_b37.txt',
        bcftools    => '] .$$self{bcftools}. q[',
        tabix       => '] .$$self{tabix}. q[',
        phased_concat_args => '] .$$self{phased_concat_args}. q[',

        # The known_vcf (aka -k) and in_vcf (aka -i) file names can contain the
        #   string "{CHROM}" which will be expanded according to chromosomes
        #   listed in the "region" key below. If the key is not defined, glob
        #   expansion will be used to obtain the chromosomes. The VCFs must be
        #   tabix indexed.  
        # Use known_vcf when there is an additional info about the samples (the
        #   samples overlap and "known_vcf" is used as scaffold of known
        #   genotypes) or when imputing reference data into the study samples
        #   (the samples do not overlap).  
        # The "known_vcf" will be passed to impute2 via -h and -l option. If
        #   set, consider also setting the "chunk_by_known" key. When multiple
        #   reference panels are given, the pipeline will run impute2 with the
        #   -merge_ref_panels option. If 'known_hapref' is set, the reference
        #   will be saved in the 'known_hapref' directory in the format suitable
        #   for subsequent reusal by the run-impute2 pipeline.
        # Note that the output VCF is not phased. This is because the impute2's
        #   -phase option does not output imputed sites which are present only
        #   in the reference panel (known_vcf).
        # Reported issues: When -h file is splitted into chunks, the performance
        #   is significantly worse than when left unsplitted and passed via
        #   impute2_args args.
        #
        # known_vcf    => [ '/lustre/scratch107/user/pd3/uk10k-1kg-imputation/uk10k-files/{CHROM}.vcf.gz', '/lustre/scratch107/user/pd3/uk10k-1kg-imputation/1kg-files/{CHROM}.vcf.gz'  ],
        # known_hapref => '/lustre/scratch107/user/pd3/uk10k-1kg-imputation/impute2-hap-files.2014-03-18/',
        # phased_only  => 0,    # Include only fully phased sites from the reference panel
        # in_vcf       => '/some/path/chr{CHROM}.vcf.gz',
        # in_GL_tag    => 'PL',     # generate input genotype likelihoods from this tag (PL,GL,GT)

        # If given, bcftools stats will be run to evaluate the performance
        # eval_vcf => undef,
        
        # Impute N samples at a time against the reference panel of known_vcf
        #   haplotypes. Include '-burnin 0 -iter 4' in impute2_args for this.
        #   When also merge_with_known is set, the output VCF will be merged with
        #   the known_vcf.
        # (Experimental, currently not functional.)
        # per_sample => 1,
        # merge_with_known => 1,

        # The -prob_g option tells the program to treat the input genotypes
        #   probabilistically (i.e., as likelihoods), rather than just
        #   thresholding the probabilities (-call_thresh) to get hard or
        #   missing calls.
        # The -pgs_prob option tells the program to "predict genotyped SNPs"
        #   (infer genotypes at SNPs in the -g file) by combining LD
        #   information with the input probabilities.
        # Known issues: Without -prob_g and -pgs_prob, the accuracy may be
        #   sometimes better.
        #
        impute2_args => '-Ne 20000 -k 80 -allow_large_regions -prob_g -pgs_prob',

        # Chunk-specific options will be applied to chunks with a non-zero overlap
        chunk_options => { 
            'X:0-155270560' => { impute2_args=>'-Ne 15000 -k 100 -allow_large_regions'  },
        },


        # Number of sites per chunk and in buffer regions. The total number of
        #   sites considered is buffer_nsites+chunk_nsites.  The chunks are
        #   determined based on the input VCF (-i) unless chunk_by_known is set.
        buffer_nsites  => 5_000,
        chunk_nsites   => 10_000,
        chunk_by_known => 0,
        max_chr_len    => ] .$$self{max_chr_len}. q[,

        # Create whole-genome VCF? This can produce *huge* files for thousands of samples
        merge_chroms   => 0,

        # Regions to impute, the chunks must be sorted by chromosomal position
        #   or else the resulting VCF will not be sorted. By default, the whole
        #   input VCF is imputed.
        # region => [ '1:159000000-161000000', '1:62000000-64000000', '2' ],

        limits   => { memory=>5_500, runtime=>3*24*60 },
        do_clean => 1,   # Remove runner's temporary files
    ]."\n";

    $$self{chunks_overlap} = 0;

    $$self{usage} .= 
        "Usage: run-impute2 [OPTIONS]\n" .
        "Options:\n" .
        "   -i, --impute-vcf <file>             The target VCF file to be imputed or genotypes refined\n" .
        "   -k, --known-vcf <file>              Known VCF file\n" .
        "   -m, --mrProper                      Clean all intermediate files, including Impute2 output files, leaving only top-level VCFs\n" .
        "   -o, --outdir <dir>                  Output directory\n" .
        "   -r, --region <chr|chr:from-to>      Run imputation in the given region only\n" .
        "\n";

    return $self;
}

sub parse_args
{
    my ($self) = @_;
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-r' or $arg eq '--region' ) { push @{$$self{region}},shift(@ARGV); next; }
        if ( $arg eq '-m' or $arg eq '--mrProper' ) { $$self{mrProper}=1; next; }
        if ( $arg eq '-l' or $arg eq '--list-chunks' ) { $$self{list_chunks}=1; next; }
        if ( $arg eq '-i' or $arg eq '--impute-vcf' ) { $$self{in_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-k' or $arg eq '--known-vcf' ) { $$self{known_vcf}=shift(@ARGV); next; }
        if ( $arg eq '-o' or $arg eq '--outdir' ) { $$self{outdir}=shift(@ARGV); next; }
        $self->throw();
    }
    if ( !exists($$self{in_vcf}) ) { $self->throw("Expected the -i option.\n"); }
    if ( ref($$self{in_vcf}) ne '' ) { $self->throw("Expected string for in_vcf, got ".ref($$self{in_vcf})); }
    if ( !exists($$self{outdir}) ) { $self->throw("Expected the -o option.\n"); }
    if ( $$self{mrProper} )
    {
        $self->mrProper($$self{outdir});
        $self->all_done;
    }
    if ( !exists($$self{version}) or $$self{version} ne $$self{config_version} )
    {
        $self->warn("Warning: Your config file may be out of date, the latest version key is \"$$self{config_version}\". Please run with +sampleconf to see what changed.\n");
    }
    if ( !exists($$self{gen_map}) ) 
    {
        $$self{gen_map} = '/nfs/users/nfs_p/pd3/sandbox/impute2/genetic_maps_b37/genetic_map_chr{CHROM}_combined_b37.txt';
        $self->warn("The 'gen_map' config key not present, assuming: $$self{gen_map}\n"); 
    }
    if ( !exists($$self{impute2_args}) ) 
    {
        $$self{impute2_args} = '-Ne 15000 -k 100';
        $self->warn("The 'impute2_args' config key not present, assuming: $$self{impute2_args}\n"); 
    }
    if ( exists($$self{pre_phase}) )
    {
        if ( !exists($$self{shapeit_bin}) ) { $self->throw("Missing the key \"shapeit_bin\". (Required when \"pre_phase\" is set.)\n"); }
    }
    if ( exists($$self{buffer_region}) or exists($$self{chunk_size}) )  
    { 
        $self->throw("The keys buffer_region and chunk_size are deprecated, please use buffer_nsites and chunk_nsites instead.\n"); 
    }
    if ( !exists($$self{buffer_nsites}) ) 
    { 
        $self->throw("Missing the key buffer_nsites"); 
    }
    if ( !exists($$self{chunk_nsites}) ) 
    { 
         $self->throw("Missing the key chunk_nsites");
    }
    if ( $$self{per_sample} && !exists($$self{known_vcf}) ) 
    {
        $self->throw("With \"per_sample\" also \"known_vcf\" should be given.\n");
    }
    if ( $$self{chunk_by_known} && !exists($$self{known_vcf}) )
    {
        $self->throw("With \"chunk_by_known\" also \"known_vcf\" should be given.\n");
    }
    $$self{chunk_file} = "$$self{outdir}/chunks.txt";
    if ( exists($$self{known_vcf}) && ref($$self{known_vcf}) ne 'ARRAY' )
    {
        $$self{known_vcf} = [ $$self{known_vcf} ];
    }
}

sub main
{
    my ($self) = @_;
    $self->parse_args();
    $self->save_config();

    my $outdir = $$self{outdir};

    # Convert from VCFs to impute2
    my $chunks = $self->read_chunks();
    if ( !$self->is_finished("$outdir/01.vcf_to_impute.done") )
    {
        for my $chunk (@$chunks)
        {
            $self->spawn('vcf_to_impute2',"$outdir/$$chunk[0]/01.vcf_to_impute2.$$chunk[1]-$$chunk[2].done",$chunk);
        }
        $self->wait;
        $self->cmd(qq[touch $outdir/01.vcf_to_impute.done]);
    }

    # Run impute2 on chunks
    if ( !$self->is_finished("$outdir/02.impute2.done") )
    {
        $self->set_limits(%{$$self{limits}}) unless !exists($$self{limits});
        for my $chunk (@$chunks)
        {
            $self->spawn('impute2',"$outdir/$$chunk[0]/02.impute2.$$chunk[1]-$$chunk[2].done",$chunk);
        }
        $self->wait;
        $self->set_limits(memory=>undef,runtime=>undef,verbose=>1);
        $self->cmd(qq[touch $outdir/02.impute2.done]);
    }

    # Convert to VCFs and concat
    if ( !$self->is_finished("$outdir/04.merge.done") ) 
    {
        if ( $$self{merge_chroms} ) { $self->throw("fixme: merge_chroms parameter not active yet"); }
        else
        {
            for my $chunk (@$chunks)
            {
                $self->spawn('impute2_to_vcf',"$outdir/$$chunk[0]/03.impute2_to_vcf.$$chunk[1]-$$chunk[2].bcf",$chunk);
            }
            $self->wait; 

            my @chroms = $self->get_chroms($chunks);
            $self->set_limits(runtime=>24*60);
            for my $chr (@chroms)
            {
                $self->spawn('concat_vcfs',"$outdir/$chr.bcf",$chunks,$chr);
            }
            $self->wait; 

            $self->set_limits(runtime=>undef);
            $self->cmd("touch $outdir/04.merge.done");
        }
    }

    # Run performance stats and clean
    $self->spawn('runtime_stats',"$outdir/runtime");
    $self->wait;
    $self->clean($outdir) unless !$$self{do_clean};

    $self->all_done;
}

sub mrProper
{
    my ($self,$outdir) = @_;
    $self->SUPER::clean($outdir);
    my $regions = $self->regions();
    for my $region (@$regions)
    {
        $self->cmd("rm -rf $outdir/$region");
    }
}

sub runtime_stats
{
    my ($self,$outfile) = @_;
    $self->cmd("mkdir -p $outfile.part");
    $self->cmd("runtime-stats $$self{outdir} -p $outfile.part/graph > $outfile.part/stats.txt");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub set_chunk_options
{
    my ($self,$chr,$from,$to) = @_;
    if ( !exists($$self{chunk_options}) ) { return; }
    my $hit;
    for my $chunk (keys %{$$self{chunk_options}})
    {
        if ( !($chunk=~/^([^:]+):(\d+)-(\d+)$/) ) { $self->throw("Could not parse the chunk_options: [$chunk]"); }
        if ( $chr ne $1 ) { next; }
        if ( $2>$to ) { next; }
        if ( $3<$from ) { next; }
        $hit = $chunk;
        last;
    }
    if ( !defined $hit )
    {
        if ( exists($$self{ori_chunk_options}) ) 
        {
            $self->set_options($$self{ori_chunk_options},$self);
        }
        return;
    }
    if ( !exists($$self{ori_chunk_options}) )
    {
        $$self{ori_chunk_options} = {};
        $self->set_options($self,$$self{ori_chunk_options},keys %{$$self{chunk_options}{$hit}});
    }
    $self->set_options($$self{chunk_options}{$hit},$self);
}

sub set_options
{
    my ($self,$src,$tgt,@keys) = @_;
    if ( !scalar @keys ) { @keys = keys %$src }
    for my $key (@keys)
    {
        $$tgt{$key} = $$src{$key};
    }
}

sub has_region
{
    my ($self,$vcf,$region) = @_;
    my $file = $self->expand_chrom($vcf,$region);
    if ( !-e $file ) { return 0; }
    if ( $file ne $vcf ) { return 1; }  # expanded template

    # potentially multiple chromosomes in the file
    open(my $fh,"$$self{bcftools} query -r $region -f'%CHROM\\t%POS\\n' $file |") or $self->throw("$$self{bcftools} query -r $region -f'%CHROM\\t%POS\\n' $file: $!");
    while (my $line=<$fh>)
    {
        close($fh);
        return 1;
    }
    close($fh);
    return 0;
}

sub read_chunks
{
    my ($self) = @_;
    if ( !-e $$self{chunk_file} ) 
    { 
        # When multiple reference VCFs are given, only the first is used to define chunks
        my $in_file = $$self{chunk_by_known} && defined $$self{known_vcf}[0] ? $$self{known_vcf}[0] : $$self{in_vcf};
        my @regions = $self->define_regions($in_file);
        for my $region (@regions)
        {
            if ( exists($$self{known_hapref}) )
            {
                if ( -e "$$self{known_hapref}/$region.chunks.txt" )
                {
                    $self->cmd("cp $$self{known_hapref}/$region.chunks.txt $$self{chunk_file}.$region");
                    next;
                }
                if ( $region=~/^([^:]+):/ ) # not a whole chromosome
                {
                    $self->throw("todo: $region vs $$self{known_hapref}\n");
                }
            }
            if ( !$self->has_region($$self{in_vcf},$region) ) { next; }
            $self->spawn('define_chunks',"$$self{chunk_file}.$region",$in_file,$region);
        }
        $self->wait;

        $self->cmd("> $$self{chunk_file}.part");
        for my $region (@regions)
        {
            if ( !$self->has_region($$self{in_vcf},$region) ) { next; }
            $self->cmd("cat $$self{chunk_file}.$region >> $$self{chunk_file}.part");
        }
        rename("$$self{chunk_file}.part",$$self{chunk_file}) or $self->throw("rename $$self{chunk_file}.part $$self{chunk_file}: $!");
        for my $region (@regions)
        {
            unlink("$$self{chunk_file}.$region");
        }
    }
    open(my $fh,'<',$$self{chunk_file}) or $self->throw("$$self{chunk_file}: $!");
    my @chunks;
    while (my $line=<$fh>)
    {
        chomp($line);
        my @items = split(/\t/,$line);
        push @chunks, [@items];
    }
    close($fh) or $self->throw("$$self{chunk_file}: $!");
    return \@chunks;
}

sub define_chunks
{
    my ($self,$outfile,$in_file,$region) = @_;
    my $tot_sites = $$self{buffer_nsites} + $$self{chunk_nsites};
    my (@chunks,@buffer);
    my $file = $self->expand_chrom($in_file,$region);
    my $cmd  = "$$self{tabix} $file $region |";
    open(my $in,$cmd) or $self->throw("$cmd: $!");
    while (my $line=<$in>)
    {
        if ( substr($line,0,1) eq '#' ) { next; }
        my $i = index($line,"\t");
        if ( $i<0 ) { $self->throw("Could not parse the line [CHR]: $line"); }
        my $chr = substr($line,0,$i);
        my $j = index($line,"\t",$i+1);
        if ( $j<0 ) { $self->throw("Could not parse the line [POS]: $line"); }
        my $pos = substr($line,$i+1,$j-$i-1);

        if ( @buffer && $buffer[0][0] ne $chr or @buffer>$tot_sites )
        {
            my $chr_from = $buffer[0][0];
            my $pos_from = $buffer[0][1];
            my $pos_to   = $buffer[-1][1];
            my $nout     = @buffer;
            push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
            if ( $$self{chunk_nsites}<@buffer ) { splice(@buffer,0,$$self{chunk_nsites}); }
            else { @buffer = (); }
        }
        push @buffer, [$chr,$pos];
    }
    if ( @buffer )
    {
        my $chr_from = $buffer[0][0];
        my $pos_from = $buffer[0][1];
        my $pos_to   = $buffer[-1][1];
        my $nout     = @buffer;
        push @chunks, { chr=>$chr_from, from=>$pos_from, to=>$pos_to, n=>$nout };
    }
    close($in) or $self->throw("close $cmd");

    if ( !@chunks ) { $self->throw("No chunks defined?\n"); }
    if ( @chunks>1 && $chunks[-1]{n} < $tot_sites*0.75 && $chunks[-1]{chr} eq $chunks[-2]{chr} )
    {
        my $chunk = splice(@chunks,-1,1);
        $chunks[-1]{to} = $$chunk{to};
        $chunks[-1]{n} += $$chunk{n};
    }

    if ( !($region=~/:/) )
    {
        # Whole genome or whole chromosome was requested. When on a new
        # chromosome, expand the first and last record to accompany
        # sites which may be present only in one (known_vcf vs in_vcf)
        for (my $i=0; $i<@chunks; $i++)
        {
            if ( $i==0 ) { $chunks[0]{from} = 0; next; }
            if ( $chunks[$i]{chr} ne $chunks[$i-1]{chr} )
            {
                $chunks[$i-1]{to} = $$self{max_chr_len};
                $chunks[$i]{from} = 0;
            }
        }
        $chunks[-1]{to} = $$self{max_chr_len};
    }

    open(my $out,'>',"$outfile.part") or $self->throw("$outfile.part: $!");
    for my $chunk (@chunks)
    {
        print $out "$$chunk{chr}\t$$chunk{from}\t$$chunk{to}\t$$chunk{n}\n";
    }
    close($out) or $self->throw("close $outfile.part");
    rename("$outfile.part",$outfile) or $self->throw("rename $outfile.part $outfile: $!");
}

sub get_chroms
{
    my ($self,$regions) = @_;
    my %chroms;
    for my $reg (@$regions) 
    { 
        $chroms{$$reg[0]} = 1; 
    }
    return ( sort keys %chroms );
}

sub expand_chrom
{
    my ($self,$path,$region) = @_;
    if ( !defined $region ) { return $path; }
    $region =~ s/:.*$//;
    $path =~ s/{CHROM}/$region/g;
    return $path;
}

sub define_regions
{
    my ($self,$path) = @_;
    if ( exists($$self{region}) ) { return @{$$self{region}}; }
    if ( !($path=~/{CHROM}/) ) 
    { 
        my @chrs = grep { chomp } $self->cmd("$$self{tabix} -l $path");
        return @chrs;
    }
    my $before = $`;
    my $after  = $';
    $path =~ s/{CHROM}/*/;  # only one occurance of {CHROM} is allowed in this implementation
    my @list = glob($path);
    if ( !@list ) { $self->throw("No such file(s): $path"); }
    my @regs;
    for my $file (@list)
    {
        $file =~ s{^$before}{};
        $file =~ s{$after$}{};
        push @regs,$file;
    }
    return @regs;
}

sub known_hapref_exists
{
    my ($self,$chr,$chunk) = @_;
    if ( !exists($$self{known_hapref}) ) { return 0; }
    if ( !-e "$$self{known_hapref}/$chr/$chunk.ref.hap.samples" ) { return 0; }
    return "$$self{known_hapref}/$chr/$chunk.ref";
}

sub vcf_to_impute2
{
    my ($self,$outfile,$chunk) = @_;
    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    my $outdir = "$$self{outdir}/$chr";
    my $in_vcf = $self->expand_chrom($$self{in_vcf},$chr);

    if ( $$self{phased_only} ) { $self->throw("todo: phased_only"); }

    $self->cmd(qq[mkdir -p $outdir]);

    if ( exists($$self{known_vcf}) && !$self->known_hapref_exists($chr,"$from-$to") )
    {
        my @known = @{$$self{known_vcf}};
        for (my $i=0; $i<@known; $i++)
        {
            my $vcf = $self->expand_chrom($known[$i],$chr);
            my $cmd = qq[$$self{bcftools} convert --haploid2diploid --haplegendsample $outdir/01.vcf_to_impute2.$from-$to.known$i -r $chr:$from-$to $vcf];
            $self->cmd($cmd);
        }
    }

    my $gl_tag = $$self{in_GL_tag} ? "--tag $$self{in_GL_tag}" : '--tag GT';
    my $cmd = qq[$$self{bcftools} convert $gl_tag --gensample $outdir/01.vcf_to_impute2.$from-$to.impute -r $chr:$from-$to $in_vcf];
    $self->cmd($cmd);
    $self->cmd("touch $outfile");
}

sub impute2
{
    my ($self,$outfile,$chunk) = @_;

    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    my $outdir = "$$self{outdir}/$chr";

    $self->set_chunk_options($chr,$from,$to);
    my $genmap = $self->expand_chrom($$self{gen_map},$chr);
    if ( ! -e $genmap ) { $self->throw("The genmap [$genmap] does not exist.\n"); }

    my $files = '';
    my $known = qq[$outdir/01.vcf_to_impute2.$from-$to.known];

    # Reference genotypes: there can be one or more reference panels. With multiple panels,
    #   they can be merged on the fly without saving or saved as gen.gz file for future reusal.
    # Traditionally we ran without the reference panel in the genotype refinement mode,
    #   but that part is now broken (or at least not well tested) - beware!
    #
    my $out  = "$outdir/02.impute2.$from-$to";
    my $CMD  = "$$self{impute2_bin} $$self{impute2_args} -buffer 0 -include_buffer_in_output -o_gz -m $genmap -int $from $to";
    if ( exists($$self{known_vcf}) ) 
    {
        my $hapref_file = $self->known_hapref_exists($chr,"$from-$to");
        if ( $hapref_file )
        {
            # cached file exists
            $CMD .= " -h $hapref_file.hap.gz -l $hapref_file.legend.gz";
        }
        elsif ( @{$$self{known_vcf}} == 1 )
        {
            # single file
            $CMD .= " -h ${known}0.hap.gz -l ${known}0.legend.gz";
        }
        elsif ( !exists($$self{known_hapref}) )
        {
            # merge on the fly, don't save
            my $knowns = '';
            for (my $i=0; $i<@{$$self{known_vcf}}; $i++)
            {
                $knowns .= " -h $known${i}.hap.gz -l $known${i}.legend.gz";
            }
            $CMD .= " $knowns -merge_ref_panels";
        }
        else
        {
            # merge and save, cached file does not exist yet
            my $knowns = '';
            for (my $i=0; $i<@{$$self{known_vcf}}; $i++)
            {
                $knowns .= " -h $known${i}.hap.gz -l $known${i}.legend.gz";
            }
            my $rg_prefix = "$$self{known_hapref}/$chr/$from-$to.ref";
            $self->cmd(qq[mkdir -p $$self{known_hapref}/$chr/]);
            $self->cmd(qq[$CMD $knowns -merge_ref_panels -o $rg_prefix -merge_ref_panels_output_ref $rg_prefix]);

            unlink("$rg_prefix.hap.samples.part");
            for my $file (@{$$self{known_vcf}})
            {
                my $vcf = $self->expand_chrom($file,$chr);
                $self->cmd(qq[$$self{bcftools} query -l $vcf >> $rg_prefix.hap.samples.part]);
            }
            rename("$rg_prefix.hap.samples.part","$rg_prefix.hap.samples") or $self->throw("rename $rg_prefix.hap.samples.part $rg_prefix.hap.samples: $!");
            $CMD .= " -h $rg_prefix.hap.gz -l $rg_prefix.legend.gz";
        }
    }

    # study genotypes
    $files = qq[-g $outdir/01.vcf_to_impute2.$from-$to.impute.gen.gz -sample_g $outdir/01.vcf_to_impute2.$from-$to.impute.samples]; 

    $self->cmd(qq[$CMD $files -o $out >>$out.o 2>>$out.e]);

    # Sanity check outputs
    open(my $fh,'<',"${out}_warnings") or $self->throw("${out}_warnings: $!");
    my @warns = <$fh>;
    close($fh) or $self->throw("close failed: ${out}_warnings");
    open($fh,'<',"${out}_info") or $self->throw("${out}_info: $!");
    my @info = <$fh>;
    close($fh) or $self->throw("close failed: ${out}_info");
    if ( @warns > @info*0.1 ) { $self->throw("Too many warnings, better to check this: ${out}_warnings"); }

    $self->cmd(qq[touch $outfile]);
}

sub impute2_per_sample
{
    my ($self,$outfile,$chunk) = @_;
    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    my $outdir = "$$self{outdir}/$chr";

    $self->set_chunk_options($chr,$from,$to);
    my $genmap = $self->expand_chrom($$self{gen_map},$chr);
    if ( ! -e $genmap ) { $self->throw("The genmap [$genmap] does not exist.\n"); }

    my $known = qq[$outdir/01.vcf_to_impute2.$from-$to.known_];
    my $inp   = qq[$outdir/01.vcf_to_impute2.$from-$to.impute_];
    my $out   = qq[$outdir/02.impute2.$from-$to];

    # Samples
    open(my $fh_smpl_in,'<',"${inp}samples") or $self->throw("${inp}samples: $!");
    my @samples = <$fh_smpl_in>;
    splice(@samples,0,2);
    for (my $i=0; $i<@samples; $i++) { $samples[$i] =~ s/\s+.*$//; }
    close($fh_smpl_in) or $self->throw("close ${inp}samples");

    # Recover from previous crash
    my $isample = 0;
    my $todo = "$out.samples_todo";
    if ( -e $todo )
    {
        my @todo= `cat $todo`;
        chomp($todo[0]);
        $isample = $todo[0];
    }
    while ($isample<@samples)
    {
        # Prepare list of samples to exclude in this run
        my $fh_out;
        open($fh_out,'>',"$out.exclude_samples") or $self->throw("$out.exclude_samples: $!");
        my $nsamples = @samples - $isample < $$self{per_sample} ? @samples - $isample : $$self{per_sample};
        for (my $i=0; $i<$isample; $i++) { print $fh_out $samples[$i]; }
        for (my $i=$isample+$nsamples; $i<@samples; $i++) { print $fh_out $samples[$i]; }
        close($fh_out) or $self->throw("close $out.exclude_samples");

        my $cmd = qq[$$self{impute2_bin} $$self{impute2_args} -buffer 0 -phase -include_buffer_in_output -o_gz -m $genmap -int $from $to];
        $cmd .= qq[ -h ${known}haps.gz -l ${known}legend -g ${inp}gts.gz -sample_g ${inp}samples -exclude_samples_g $out.exclude_samples -o $out.per_sample >>$out.o 2>>$out.e];
        $self->cmd($cmd);

        # Merge the results
        if ( $isample==0 )
        {
            rename("$out.per_sample.gz","$out.part.gz");
            rename("$out.per_sample_haps.gz","$out.part_haps.gz");
            rename("$out.per_sample_haps_confidence.gz","$out.part_haps_confidence.gz");
        }
        else
        {
            $self->merge_into("$out.per_sample.gz","$out.part.gz");
            $self->merge_into("$out.per_sample_haps.gz","$out.part_haps.gz");
            $self->merge_into("$out.per_sample_haps_confidence.gz","$out.part_haps_confidence.gz");

            unlink($todo);  # non-atomic operation follows, cannot rely on history. failure here should be exceptionally rare
            rename("$out.part.gz.part","$out.part.gz");
            rename("$out.part_haps.gz.part","$out.part_haps.gz");
            rename("$out.part_haps_confidence.gz.part","$out.part_haps_confidence.gz");
        }

        $isample += $nsamples;

        open($fh_out,'>',"$todo.part") or $self->throw("$todo.part: $!");
        print $fh_out $isample;
        close($fh_out) or $self->throw("close $todo.part");
        rename("$todo.part",$todo);
    }
    rename("$out.part.gz","$out.gz") or $self->throw("rename $out.part.gz $out.gz: $!");
    rename("$out.part_haps.gz","${out}_haps.gz") or $self->throw("rename $out.part_haps.gz ${out}_haps.gz: $!");
    rename("$out.part_haps_confidence.gz","${out}_haps_confidence.gz") or $self->throw("rename $out.part_haps_confidence.gz ${out}_haps_confidence.gz: $!");
    Utils::relative_symlink("${inp}samples","${out}_samples");
    $self->cmd(qq[touch $outfile]);
}

sub merge_into
{
    my ($self,$small,$big) = @_;
    open(my $sm_in,"gunzip -c $small |") or $self->throw("gunzip -c $small |: $!");
    open(my $big_in,"gunzip -c $big |") or $self->throw("gunzip -c $big |: $!");
    open(my $out,"| gzip -c > $big.part") or $self->throw("| gzip -c > $big.part: $!");
    while (1)
    {
        my $sm_line  = <$sm_in>;
        my $big_line = <$big_in>;
        if ( !defined $sm_line && !defined $big_line ) { last; }
        if ( !defined $sm_line or !defined $big_line ) { $self->throw("Out of sync: $small vs $big\n"); }
        my $i=0; for (1..5) { $i=index($sm_line,' ',$i+1); }
        if ( $i==-1 ) { $self->throw("Could not parse columns of $small\n"); }
        my $sm5 = substr($sm_line,0,$i+1,'');
        if ( $sm5 ne substr($big_line,0,$i+1) ) { $self->throw("The columns do not agree in $small vs $big: [$sm5] vs [".substr($big_line,0,$i+1)."]"); }
        substr($big_line,-1,1,'');  # remove the newline
        print $out $big_line,' ',$sm_line;
    }
    close($out);
    close($big_in) or $self->throw("close gunzip -c $big |: $!");
    close($sm_in) or $self->throw("close gunzip -c $small |: $!");
}

sub impute2_to_vcf
{
    my ($self,$outfile,$chunk) = @_;
    my $chr  = $$chunk[0];
    my $from = $$chunk[1];
    my $to   = $$chunk[2];
    my $outdir = "$$self{outdir}/$chr";

    my $in_vcf = $self->expand_chrom($$self{in_vcf},$chr);
    if ( -s "$outfile.e" ) { `cat $outfile.e >> $outfile.e.saved`; }
    if ( ! -e "$outdir/02.impute2.$from-$to.gz" )
    {
        $self->throw("What happened: $outdir/02.impute2.$from-$to.gz, $in_vcf");
    }
    $self->cmd(qq[$$self{bcftools} convert --gensample2vcf $outdir/02.impute2.$from-$to.gz,$outdir/02.impute2.$from-${to}_samples -Ob -o $outfile.imputed.bcf]);
    $self->cmd(qq[$$self{bcftools} index $outfile.imputed.bcf]);
    $self->cmd(qq[$$self{bcftools} concat -r $chr:$from-$to -aD $outfile.imputed.bcf $in_vcf -Ob -o $outfile.merged.bcf]);
    $self->cmd(qq[$$self{bcftools} index $outfile.merged.bcf]);
    unlink("$outfile.imputed.bcf");
    unlink("$outfile.imputed.bcf.csi");
    $self->cmd(qq[$$self{bcftools} annotate -r $chr:$from-$to -c ID,QUAL,FILTER,INFO,^FMT/GT,^FMT/GP -a $in_vcf $outfile.merged.bcf -Ob -o $outfile.part]);
    $self->index_part($outfile);
    unlink("$outfile.merged.bcf");
    unlink("$outfile.merged.bcf.csi");
    rename("$outfile.part",$outfile);
}

sub concat_vcfs
{
    my ($self,$outfile,$chunks,$chr) = @_;
    open(my $fh,'>',"$outfile.list") or $self->throw("$outfile.list: $!");
    for my $chunk (@$chunks)
    {
        if ( $$chunk[0] ne $chr ) { next; }
        my $file = "$$self{outdir}/$$chunk[0]/03.impute2_to_vcf.$$chunk[1]-$$chunk[2].bcf";
        print $fh $file, "\n";
    }
    close($fh);
    $self->cmd(qq[$$self{bcftools} concat -lf $outfile.list -Ob -o $outfile.part]);
    $self->index_part($outfile);
    rename("$outfile.part",$outfile);

    return;

    #   if ( !defined($$self{eval_vcf}) )
    #   {
    #       rename("$outfile.part",$outfile);
    #       return;
    #   }
    #   rename("$outfile.part","$outfile.tmp.vcf.gz");
    #   rename("$outfile.tbi","$outfile.tmp.vcf.gz.tbi");
    #   my $args = defined $chr ? "-r $chr" : '';
    #   $self->cmd(qq[$$self{bcftools} stats $args -s - $$self{eval_vcf} $outfile.tmp.vcf.gz > $outfile.vchk]);
    #   rename("$outfile.tmp.vcf.gz.tbi","$outfile.tbi");
    #   rename("$outfile.tmp.vcf.gz","$outfile");
}

sub tabix_part
{
    my ($self,$vcf) = @_;
    $self->cmd("$$self{tabix} -p vcf -f $vcf.part");
    rename("$vcf.part.tbi","$vcf.tbi");
}

sub index_part
{
    my ($self,$vcf) = @_;
    $self->cmd("$$self{bcftools} index $vcf.part");
    rename("$vcf.part.csi","$vcf.csi");
}

sub save_config
{
    my ($self) = @_;
    my $src = $$self{_config};
    my $dst = "$$self{outdir}/impute2.conf";
    if ( -e $dst && (stat($src))[9] <= (stat($dst))[9] ) { return; }
    if ( !-d $$self{outdir} ) { $self->cmd("mkdir -p $$self{outdir}"); }
    open(my $fh,'>',$dst) or $self->throw("$dst: $!");
    my $about = $$self{_about};
    $about =~ s/\n/\n# /g;
    print $fh "# $about";
    close($fh);
    $self->cmd("cat $src >> $dst");
}

