#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use VRTrack::VRTrack;
use VertRes::Utils::VRTrackFactory;
use VRTrack::Lane;
use Sfind::Sfind;
use Sfind::Lane;

my $opts = parse_params();
for my $lane (@{$$opts{lanes}})
{
    my ($vrtrack,$path) = find_lane($lane,$opts);
    if ( !$path ) 
    { 
        print STDERR "no such lane: $lane\n";
        next; 
    }

    if ( $$opts{info} )
    {
        print "$path\n";
        next;
    }

    if ( $$opts{reset} eq 'import' ) 
    {
        reset_import($vrtrack,$path,$lane,$opts);
    }
    elsif ( $$opts{reset} eq 'qc' )
    {
        reset_qc($vrtrack,$path,$lane,$opts);
    }
    elsif ( $$opts{reset} eq 'mapped' )
    {
        reset_mapped($vrtrack,$path,$lane,$opts);
    }
    elsif ( $$opts{reset} eq 'improved' )
    {
        reset_improved($vrtrack,$path,$lane,$opts);
    }
    elsif ( $$opts{reset} eq 'rnaseq' )
    {
        reset_rnaseq($vrtrack,$path,$lane,$opts);
    }
    else
    {
        error("Unknown flag: $$opts{reset}\n");
    }
}

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg )
    {
        croak @msg;
    }
    die
        "Usage: tweak-lane [OPTIONS] lane1 lane2 ...\n",
        "Options:\n",
        "   -A, --dont-ask                   Do not ask for confirmation, delete files without asking.\n",
        "   -c, --clean                      If set, files will be deleted from the hierarchy.\n",
        "   -d, --db <root:db>               Use the database and the root specified.\n",
        "   -i, --info                       Show what hierarchy does the lane belong to.\n",
        "   -r, --reset <string>             Reset the processed flag so that the lane will be scheduled again for <import|qc|mapped|improved>.\n",
        "   -h, -?, --help                   This help message.\n",
        "\n";
}


sub parse_params
{
    my $opts = { dont_ask=>0 };
    while (my $arg=shift(@ARGV))
    {
        if ( $arg eq '-A' || $arg eq '--dont-ask' ) { $$opts{'dont_ask'} = 1; next }
        if ( $arg eq '-c' || $arg eq '--clean' ) { $$opts{'clean'} = 1; next }
        if ( $arg eq '-d' || $arg eq '--db' ) 
        { 
            my $db = shift(@ARGV);
            if ( !($db=~/^([^:]+):(.+)$/) ) { error("Could not parse the root:db string: \"$db\".\n"); }
            $$opts{root} = $1;
            $$opts{db}   = $2; 
            next;
        }
        if ( $arg eq '-i' || $arg eq '--info' ) { $$opts{'info'} = 1; next }
        if ( $arg eq '-r' || $arg eq '--reset' ) { $$opts{'reset'} = shift(@ARGV); next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        push @{$$opts{lanes}}, $arg;
    }
    if ( !exists($$opts{'reset'}) && !exists($$opts{'info'}) ) { error("Missing the -r or -i option.\n") }
    if ( !exists($$opts{lanes}) ) 
    { 
        while (my $lane=<STDIN>)
        {
            chomp($lane);
            push @{$$opts{lanes}}, $lane;
        }
    }
    return $opts;
}


sub find_lane
{
    my ($lane,$opts) = @_;

    my $db_opts = { VertRes::Utils::VRTrackFactory->connection_details('rw') };
    my %dbs = (
            g1k_meta  => '/lustre/scratch102/projects/g1k/META/', 
            g1k_track => '/lustre/scratch102/projects/g1k/TRACKING/', 
            mouse_reseq_track => '/lustre/scratch102/projects/mouse/TRACKING/'
            );

    if ( exists($$opts{db}) && exists($$opts{root}) )
    {
        %dbs = ( $$opts{db} => $$opts{root} );
    }

    my ($vrtrack,$db,$path);
    for $db (keys %dbs)
    {
        $$db_opts{database} = $db;
        $vrtrack = VRTrack::VRTrack->new($db_opts);
        if ( !$vrtrack ) { error("No value from VRTrack::VRTrack->new()? [db=$$db_opts{database}]\n"); }
        $path = $vrtrack->hierarchy_path_of_lane_name($lane);
        if ( $path ) 
        { 
            $path = "$dbs{$db}/$path";
            last; 
        }
    }

    return ($vrtrack,$path);
}

sub vrfile_from_sfile
{
    # If this does not work, check if update_vrtrack.pl does the same
    my ($vlane,$fq) = @_;

    my $fqname = $fq->name;
    my @check_names;

    if ($fqname =~ /(\d+)_s_(\d).fastq/){
        my $splitfwd = "$1_$2_1.fastq";
        my $splitrev = "$1_$2_2.fastq";
        @check_names = ("$splitfwd.gz","$splitrev.gz",
                $splitfwd,$splitrev,
                );
    }
    push @check_names, ("$fqname.gz",$fqname);

    my $vfile;
    foreach my $check_name (@check_names){
        last if $vfile;
        $vfile = $vlane->get_file_by_name($check_name);
    }

    $vfile = $vlane->add_file($fq->name);
    $vfile->raw_reads($fq->reads);
    $vfile->raw_bases($fq->basepairs);
    $vfile->read_len($fq->read_len);
    $vfile->mean_q($fq->mean_quality);
    $vfile->md5($fq->md5);

    if ($fqname =~ /^\d+_s_\d.fastq/){
        $vfile->type(3);
    }
    elsif ($fqname =~ /^\d+_\d_1.fastq/){
        $vfile->type(1);
    }
    elsif ($fqname =~ /^\d+_\d_2.fastq/){
        $vfile->type(2);
    }
    elsif ($fqname =~ /^\d+_\d.fastq/){
        $vfile->type(0);
    }
    else {
        print "Can't determine type of file $fqname\n";
    }
    $vfile->update;
}

sub reset_import
{
    my ($vrtrack,$path,$lane,$opts) = @_;

    die "FIXME: fastq->bams??\n";

    $vrtrack->transaction_start();

    # Get the list of vrtrack files and unset the latest status
    my $vrlane  = VRTrack::Lane->new_by_name($vrtrack,$lane);
    my $vrfiles = $vrlane->files();
    for my $vrfile (@$vrfiles)
    {
        $vrfile->is_latest(0);
        $vrfile->update();
    }

    # Get the list of mpsa files
    my $strack = Sfind::Sfind->new();
    my ($run,$lane_id) = split(/_/,$lane);
    my $slane  = Sfind::Lane->new_by_run_lane($$strack{_dbh},$run,$lane_id);
    my $sfiles = $slane->fastq_filenames();
    for my $sfile (@$sfiles)
    {
        # If this does not work, check if update_vrtrack.pl does the same
        vrfile_from_sfile($vrlane,Sfind::Fastq->new($sfile));
    }

    $vrlane->is_processed('import',0);
    $vrlane->update();
    $vrtrack->transaction_commit();

    if ( $$opts{clean} )
    {
        my $rm_cmd = qq[rm -f $path/$lane*fastq $path/$lane*fastq.gz $path/$lane*fastq.md5 $path/$lane*fastq.gz.fastqcheck $path/_job_status];
        if ( !$$opts{dont_ask} ) 
        {
            confirm_action("About to delete\n\t$rm_cmd\n");
        }
        print "$rm_cmd\n";
        `$rm_cmd`;
    }
}

sub reset_qc
{
    my ($vrtrack,$path,$lane,$opts) = @_;

    my $vrlane = VRTrack::Lane->new_by_name($vrtrack,$lane);

    if ( $$opts{clean} )
    {
        my $rm_cmd = qq[rm -rf $path/qc-sample $path/_job_status];
        if ( !$$opts{dont_ask} ) 
        {
            confirm_action("About to delete\n\t$rm_cmd\n");
        }
        print "$rm_cmd\n";
        `$rm_cmd`;
    }

    $vrlane->is_processed('qc',0);
    $vrlane->update();
}


sub reset_mapped
{
    my ($vrtrack,$path,$lane,$opts) = @_;

    my $vrlane = VRTrack::Lane->new_by_name($vrtrack,$lane);

    if ( $$opts{clean} )
    {
        my $rm_cmd = qq[rm -f $path/.split_complete* $path/.mapping_complete* $path/.[0-9]*.checked $path/*.sorted.bam $path/*.flagstat $path/*.bas $path/_job_status];
        if ( !$$opts{dont_ask} ) 
        {
            confirm_action("About to delete\n\t$rm_cmd\n");
        }
        print "$rm_cmd\n";
        `$rm_cmd`;
    }

    $vrlane->is_processed('mapped',0);
    $vrlane->update();
}

sub reset_improved
{
    my ($vrtrack,$path,$lane,$opts) = @_;

    my $vrlane = VRTrack::Lane->new_by_name($vrtrack,$lane);

    if ( $$opts{clean} )
    {
        my $rm_cmd = qq[rm -f $path/.realign* $path/.recalibrate* $path/.rewrite_header* $path/.sort_complete* $path/*.pe.realigned.sorted.recal.calmd.bam $path/*.pe.realigned.sorted.recal.calmd.bam.bas $path/*.pe.realigned.sorted.bam.recal_data.csv $path/*.bas $path/_job_status $path/*.pe.realigned.sorted.recal.calmd.bam.flagstat $path/_index_* $path/_rewrite_header_* $path/_recalibrate_* $path/_sort_* $path/_realign_* $path/_calmd_*];
        if ( !$$opts{dont_ask} )
        {
            confirm_action("About to delete\n\t$rm_cmd\n");
        }
        print "$rm_cmd\n";
        `$rm_cmd`;
    }

    $vrlane->is_processed('improved',0);
    $vrlane->update();
}


sub reset_rnaseq
{
    my ($vrtrack,$path,$lane,$opts) = @_;

    my $vrlane = VRTrack::Lane->new_by_name($vrtrack,$lane);

    if ( $$opts{clean} )
    {
        my $rm_cmd = qq[rm -f $path/*.intergenic.* $path/*calculate_expression* $path/*.coverageplot.gz $path/*.expression.csv $path/_cleanup_done $path/_update_db_done $path/_job_status];
        if ( !$$opts{dont_ask} ) 
        {
            confirm_action("About to delete\n\t$rm_cmd\n");
        }
        print "$rm_cmd\n";
        `$rm_cmd`;
    }

    $vrlane->is_processed('rna_seq_expression',0);
    $vrlane->update();
}


sub confirm_action
{
    my ($msg) = @_;
    print $msg."\nok? (<CTRL+c> to interrupt, enter to proceed)\n";
    <STDIN>;
}


