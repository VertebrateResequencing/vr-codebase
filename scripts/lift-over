#!/usr/bin/env perl
#
# Author: petr.danecek@sanger
#

use strict;
use warnings;
use Carp;
use Utils;
use FindBin;
use lib "$FindBin::Bin";
use FaSlice;

my $opts = parse_params();
if ( exists($$opts{tlog}) )
{
    apply_tlog($opts);
}
else
{
    run_liftover($opts);
}

exit;

#--------------------------------

sub error
{
    my (@msg) = @_;
    if ( scalar @msg ) { confess @msg; }
    die
        "About: Calls liftOver to modify coordinates of tab-delimited and bed files. Unless the file suffix is '.bed' or '.bed.gz',\n",
        "       only the first and second column (chromosome and position) are modified, the rest of the line and comment lines\n",
        "       (starting with #) are left unchanged. Use the -C option if chr,beg,end are not the first three columns.\n",
        "Usage: lift-over [OPTIONS] > out_file\n",
        "Options:\n",
        "   -a, --apply-log <file>          Apply log file from previous run, do not lift-over nor check the reference again.\n",
        "   -C, --columns chr,beg[,end]     The indices of chr,beg,end columns, 1-based [1,2,3]\n",
        "   -c, --chain-file <file>         The liftover chain file.\n",
        "   -i, --in <file>                 The file to be lifted over\n",
        "   -l, --liftOver <string>         lifOver executable and options to be passed to liftOver\n",
        "   -n, --new-ref <file>            The reference of the output file\n",
        "   -o, --ori-ref <file>            The reference of the input file\n",
        "   -p, --prefix <dir>              Output files prefix\n",
        "   -w, --win <int>                 Length of flanking sequence for sanity check of the transform (2*win+1) [10]\n",
        "   -h, -?, --help                  This help message.\n",
        "Chain files:\n",
        "   http://hgdownload.cse.ucsc.edu/downloads.html\n",
        "   Human NCBI36 to NCBI37\thttp://hgdownload.cse.ucsc.edu/goldenPath/hg18/liftOver/hg18ToHg19.over.chain.gz\n",
        "\n";
}


sub parse_params
{
    my $opts = { win=>10, liftOver=>'liftOver' };
    while (defined(my $arg=shift(@ARGV)))
    {
        if ( $arg eq '-C' || $arg eq '--columns' ) { $$opts{columns}=shift(@ARGV); next }
        if ( $arg eq '-a' || $arg eq '--apply-log' ) { $$opts{tlog}=shift(@ARGV); next }
        if ( $arg eq '-l' || $arg eq '--liftOver' ) { $$opts{liftOver}=shift(@ARGV); next }
        if ( $arg eq '-n' || $arg eq '--new-ref' ) { $$opts{new_ref}=shift(@ARGV); next }
        if ( $arg eq '-o' || $arg eq '--ori-ref' ) { $$opts{ori_ref}=shift(@ARGV); next }
        if ( $arg eq '-p' || $arg eq '--prefix' ) { $$opts{prefix}=shift(@ARGV); next }
        if ( $arg eq '-i' || $arg eq '--in' ) { $$opts{in_file}=shift(@ARGV); next }
        if ( $arg eq '-c' || $arg eq '--chain' ) { $$opts{chain}=shift(@ARGV); next }
        if ( $arg eq '-w' || $arg eq '--win' ) { $$opts{win}=shift(@ARGV); next }
        if ( $arg eq '-?' || $arg eq '-h' || $arg eq '--help' ) { error(); }
        error("Unknown parameter \"$arg\". Run -h for help.\n");
    }
    if ( !exists($$opts{in_file}) ) { error("Missing the -i option.\n") }
    if ( !exists($$opts{tlog}) ) 
    {
        if ( !exists($$opts{chain}) ) { error("Missing the -c option.\n") }
        if ( !exists($$opts{prefix}) ) { error("Missing the -p option.\n") }
        if ( !exists($$opts{new_ref}) ) { warn("The sanity check will not be performed: missing the reference file (-n).\n") }
        if ( !exists($$opts{ori_ref}) ) { warn("The sanity check will not be performed: missing the reference file (-o).\n") }
    }
    if ( exists($$opts{columns}) )
    {
        ($$opts{ichr},$$opts{ibeg},$$opts{iend}) = split(/,/,$$opts{columns});
        $$opts{ichr}--;
        $$opts{ibeg}--;
        if ( defined($$opts{iend}) ) { $$opts{chr_beg_end} = 1; $$opts{iend}--; }
    }
    else
    {
        $$opts{is_bed} = ($$opts{in_file}=~/\.bed$/i or $$opts{in_file}=~/\.bed\.gz$/i) ? 1 : 0;
        if ( $$opts{is_bed} ) { $$opts{chr_beg_end} = 1; }
    }
    return $opts;
}

sub run_liftover
{
    my ($opts) = @_;
    $$opts{ori_bed} = "$$opts{prefix}/in.bed";
    my $out_bed = "$$opts{prefix}/out.bed";

    Utils::CMD("mkdir -p $$opts{prefix}");

    # Convert the tab-delimited file to BED file and convert chrom names from N to chrN
    my $cmd = ( $$opts{in_file}=~/\.gz$/i ) ? "zcat $$opts{in_file} |" : "<$$opts{in_file}";
    open(my $in_fh,$cmd) or error("$cmd: $!");
    open(my $bed_fh,'>',$$opts{ori_bed}) or error("$$opts{ori_bed}: $!");
    while (my $line=<$in_fh>)
    {
        if ( $line=~/^#/ ) { next; }
        my ($chr,$beg,$end);
        if ( exists($$opts{ichr}) )
        {
            my @col = split(/\t/,$line);
            chomp($col[-1]);
            $chr = $col[$$opts{ichr}];
            $beg = $col[$$opts{ibeg}] - 1;
            $end = $$opts{chr_beg_end} ? $col[$$opts{iend}] : $col[$$opts{ibeg}];
        }
        elsif ( $$opts{is_bed} )
        {
            if ( !($line=~/^(\S+)\s+(\d+)\s+(\d+)/) ) { error("Could not parse bed file: $line"); }
            $chr = $1;
            $beg = $2;
            $end = $3;
        }
        else
        {
            if ( !($line=~/^(\S+)\s+(\d+)/) ) { error("Could not parse: $line"); }
            $chr = $1;
            $beg = $2 - 1;
            $end = $2;
        }
        if ( !($chr=~/^chr/) ) { $chr="chr$chr"; }
        printf $bed_fh "%s\t%d\t%d\n",$chr,$beg,$end;
    }
    close($bed_fh);
    close($in_fh);

    # Run liftover
    $$opts{mapped}   = "$$opts{prefix}/out.mapped";
    $$opts{unmapped} = "$$opts{prefix}/out.unmapped";
    Utils::CMD("$$opts{liftOver} $$opts{ori_bed} $$opts{chain} $$opts{mapped} $$opts{unmapped}");

    # Check sanity
    $$opts{tlog} = "$$opts{prefix}/liftover.tlog";
    compare($opts);

    # Transfer the coordinates
    apply_tlog($opts);
}

sub strand_aware_match
{
    my ($ori,$new) = @_;

    my $out_fwd = { m=>0, mm=>0, len=>length($new)-length($ori), fwd_rev=>3 };  # fwd:1, rev:2
    my $out_rev = { m=>0, mm=>0, len=>length($new)-length($ori), fwd_rev=>3 };
    if ( $$out_fwd{len} ) { return $out_fwd; }

    my %map = ( A=>'T', C=>'G', G=>'C', T=>'A', N=>'N' );

    my $len = length($ori);
    for (my $i=0; $i<$len; $i++)
    {
        my $ori_fwd = substr($ori,$i,1);
        my $new_fwd = substr($new,$i,1);
        my $new_rev = substr($new,$len-$i-1,1);
        if ( !exists($map{$new_rev}) ) { error("Unknown base: $new_rev\n"); }
        $new_rev = $map{$new_rev};

        if ( $ori_fwd eq $new_fwd ) { $$out_fwd{m}++; }
        else { $$out_fwd{mm}++; }

        if ( $ori_fwd eq $new_rev ) { $$out_rev{m}++; }
        else { $$out_rev{mm}++; }
    }

    my $out = $out_fwd;
    if ( $$out_fwd{mm} < $$out_rev{mm} )
    {
        $$out_fwd{fwd_rev} = 1;
        $out = $out_fwd;
    }
    elsif ( $$out_fwd{mm} > $$out_rev{mm} )
    {
        $$out_rev{fwd_rev} = 2;
        $out = $out_rev;
    }
    return $out;
}

sub compare
{
    my ($opts) = @_;

    my ($fa_ori,$fa_new);
    if ( $$opts{ori_ref} && $$opts{new_ref} ) 
    {
        $fa_ori  = FaSlice->new(file=>$$opts{ori_ref}, size=>1_000_000, oob=>'N');
        $fa_new  = FaSlice->new(file=>$$opts{new_ref}, size=>1_000_000, oob=>'N');
    }
    my $pos_unm = Reader->new(file=>$$opts{unmapped});
    my $pos_ori = Reader->new(file=>$$opts{ori_bed});
    my $pos_map = Reader->new(file=>$$opts{mapped});
    open(my $tlog_fh,'>',$$opts{tlog}) or error("$$opts{tlog}: $!");

    my $num = {};
    my $win = $$opts{win};
    while (1)
    {
        my $ori = $pos_ori->next_line();
        if ( !$ori ) { last; }
        $$num{lines}++;

        my $unm = $pos_unm->next_line();
        if ( defined $unm )
        {
            if ( !defined $ori ) { error("Run out of ori lines?\n"); }
            if ( $$ori[0] eq $$unm[0] && $$ori[1] eq $$unm[1] && $$ori[2] eq $$unm[2] )
            {
                my $chr = $$ori[0];
                my $beg = $$opts{is_bed} ? $$ori[1] : $$ori[1] + 1;
                my $end = $$opts{chr_beg_end} ? "\t".$$ori[2] : '';
                print $tlog_fh "# skip\t$chr\t$beg$end\n";
                $$num{unmapped}++;
                next;
            }
            $pos_unm->unread_line($unm);
        }
        my $map = $pos_map->next_line();

        my $chr0 = $$ori[0];
        my $beg0 = $$opts{is_bed} ? $$ori[1] : $$ori[1] + 1;
        my $end0 = $$opts{chr_beg_end} ? "\t".$$ori[2] : '';
        my $chr1 = $$map[0];
        my $beg1 = $$opts{is_bed} ? $$map[1] : $$map[1] + 1;
        my $end1 = $$opts{chr_beg_end} ? "\t".$$map[2] : '';

        $$num{lifted}++;

        if ( !defined $fa_ori )
        {
            # fasta file not available, sequence checking cannot be performed
            printf $tlog_fh "$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\n";
            next;
        }

        my $flank0_ori = $fa_ori->get_slice($$ori[0],$$ori[1]+1-$win,$$ori[1]);
        my $flank0_new = $fa_new->get_slice($$map[0],$$map[1]+1-$win,$$map[1]);
        my $ref_ori    = $fa_ori->get_slice($$ori[0],$$ori[1]+1,$$ori[2]);
        my $ref_new    = $fa_new->get_slice($$map[0],$$map[1]+1,$$map[2]);
        my $flank1_ori = $fa_ori->get_slice($$ori[0],$$ori[1]+2,$$ori[1]+1+$win);
        my $flank1_new = $fa_new->get_slice($$map[0],$$map[1]+2,$$map[1]+1+$win);

        if ( !$flank0_ori or !$flank0_new or !$ref_ori or !$ref_new or !$flank1_ori or !$flank1_new ) 
        { 
            error(
                sprintf("Error: the chain file suggests that $$ori[0]:%d-%d is transformed to $$map[0]:%d-%d, but the sequence is not accessible: \n", $$ori[1]+1,$$ori[2],$$map[1]+1,$$map[2]),
                $ref_ori ? '' : sprintf("\t$$opts{ori_ref} $$ori[0]:%d-%d (%d-%d)\n",$$ori[1]+1,$$ori[2],$$ori[1]+1-$win,$$ori[1]+1+$win),
                $ref_new ? '' : sprintf("\t$$opts{new_ref} $$map[0]:%d-%d (%d-%d)\n",$$map[1]+1,$$map[2],$$map[1]+1-$win,$$map[1]+1+$win)
                );
        }

        my $cmp0 = strand_aware_match($flank0_ori,$flank0_new);
        my $cmp1 = strand_aware_match($flank1_ori,$flank1_new);
        my $cmpr = strand_aware_match($ref_ori,$ref_new);
        
        my $ok = ($$cmp0{mm} + $$cmp1{mm} + $$cmpr{mm} + abs($$cmpr{len})) ? 0 : 1;

        my $strand_mm = '';
        if ( !($$cmp0{fwd_rev} & $$cmp1{fwd_rev} & $$cmpr{fwd_rev}) )
        {
            if ( !$ok ) { $strand_mm = ','; }
            else
            {
                # This can happen when one base of the reference changes, say from A to T, and the
                # flanking sequence stays the same.
                $ok = 0;

                #   use Data::Dumper; print STDERR Dumper($cmp0,$cmpr,$cmp1);
                #   print STDERR "flank0:\n";
                #   printf STDERR "\t%s %d %d\t%s\n",$$ori[0],$$ori[1]+1-$win,$$ori[1],$flank0_ori;
                #   printf STDERR "\t%s %d %d\t%s\n",$$map[0],$$map[1]+1-$win,$$map[1],$flank0_new;
                #   print STDERR "seq:\n";
                #   printf STDERR "\t%s %d %d\t%s\n",$$ori[0],$$ori[1]+1,$$ori[2],$ref_ori;
                #   printf STDERR "\t%s %d %d\t%s\n",$$map[0],$$map[1]+1,$$map[2],$ref_new;
                #   print STDERR "flank1:\n";
                #   printf STDERR "\t%s %d %d\t%s\n",$$ori[0],$$ori[1]+2,$$ori[1]+1+$win,$flank1_ori;
                #   printf STDERR "\t%s %d %d\t%s\n",$$map[0],$$map[1]+2,$$map[1]+1+$win,$flank1_new;
                #   error("DEBUG ME: Can this really happen???");
            }
            $strand_mm = "strand_mm:$$cmp0{fwd_rev}$$cmpr{fwd_rev}$$cmp1{fwd_rev}";
            $$num{strand}++;
        }
        elsif ( $ok && !($$cmpr{fwd_rev} & 1) )
        {
            $$num{rev}++;
        }

        if ( $ok )
        {
            print $tlog_fh "$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\tmatch:100%\n";
            $$num{ok}++;
        }
        elsif ( $$cmpr{len} )
        {
            print $tlog_fh "# ignore\t$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\tlen_diff:$$cmpr{len}$strand_mm\n";
            $$num{len}++;
        }
        elsif ( $$cmpr{mm} )
        {
            my $tgt_mm  = sprintf "%.2f%%", $$cmpr{m}*100./($$cmpr{mm}+$$cmpr{m});
            my $flnk_mm = sprintf "%.2f%%", ($$cmp0{m}+$$cmp1{m})*100./($$cmp0{mm}+$$cmp0{m}+$$cmp1{mm}+$$cmp1{m});
            print $tlog_fh "# ignore\t$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\ttarget_mismatch:$tgt_mm,flank_mismatch:$flnk_mm$strand_mm\n";
            $$num{tgt_mm}++;
        }
        elsif ( $$cmp0{mm}+$$cmp1{mm} )
        {
            my $flnk_mm = sprintf "%.2f%%", ($$cmp0{m}+$$cmp1{m})*100./($$cmp0{mm}+$$cmp0{m}+$$cmp1{mm}+$$cmp1{m});
            print $tlog_fh "# ignore\t$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\tflank_mismatch:$flnk_mm$strand_mm\n";
            $$num{flnk_mm}++;
        }
        elsif ( !($$cmp0{fwd_rev} & $$cmp1{fwd_rev} & $$cmpr{fwd_rev}) )
        {
            print $tlog_fh "# ignore\t$chr0\t$beg0$end0\t->\t$chr1\t$beg1$end1\t$strand_mm\n";
            $$num{strand_mm}++;
        }
        else { error("DEBUG ME: unexpected case!\n"); }
    }
    close($tlog_fh);

    for my $key (qw(lines unmapped lifted ok len tgt_mm flnk_mm strand strand_mm rev))
    {
        if ( !exists($$num{$key}) ) { $$num{$key} = 0; }
    }

    open(my $fh,'>',"$$opts{prefix}/liftover.stats") or error("$$opts{prefix}/liftover.stats: $!");
    printf $fh "lifted over                          .. %.1f%% (%d)\n", $$num{lifted}*100./$$num{lines},$$num{lifted};
    printf $fh "unmapped                             .. %.1f%% (%d)\n", $$num{unmapped}*100./$$num{lines},$$num{unmapped};
    if ( defined $fa_ori ) 
    {
        printf $fh "success, no mismatches               .. %.1f%% (%d)\n", $$num{ok}*100./$$num{lines},$$num{ok};
        printf $fh "    - changed orientation            .. %.1f%% (%d)\n", $$num{rev}*100./$$num{lines},$$num{rev};
        print  $fh "ignored because of\n";
        printf $fh "    - length differences             .. %.1f%% (%d)\n", $$num{len}*100./$$num{lines},$$num{len};
        printf $fh "    - mismatches in target sequence  .. %.1f%% (%d)\n", $$num{tgt_mm}*100./$$num{lines},$$num{tgt_mm};
        printf $fh "    - flanking mismatches (%dbp win) .. %.1f%% (%d)\n", $win, $$num{flnk_mm}*100./$$num{lines},$$num{flnk_mm};
        printf $fh "    - strand mismatch                .. %.1f%% (%d)\n", $$num{strand_mm}*100./$$num{lines},$$num{strand_mm};
    }
    close($fh);

    print STDERR "Check sanity of the transform: $$opts{prefix}/liftover.stats\n";
}


sub apply_tlog
{
    my ($opts) = @_;

    open(my $tlog_fh,'<',$$opts{tlog}) or error("$$opts{tlog}: $!");
    my $cmd = ( $$opts{in_file}=~/\.gz$/i ) ? "zcat $$opts{in_file} |" : "<$$opts{in_file}";
    open(my $in_fh,$cmd) or error("$cmd: $!");

    while (1)
    {
        my $ori;
        while (!defined $ori)
        {
            $ori = <$in_fh>;
            if ( !defined $ori ) { last; }
            if ( !($ori=~/^#/) ) { last; }
            print $ori;
            undef $ori;
        }
        my $tlog = <$tlog_fh>;

        if ( !$ori && !$tlog ) { last; }
        if ( !$ori && $tlog or $ori && !$tlog ) { error("FIXME: Different lengths?\n"); }

        if ( $tlog=~/^# skip\t\S+\t\d+/ ) { next; }
        if ( $tlog=~/^# ignore\t\S+\t\d+/ ) { next; }

        my @col = split(/\t/,$tlog);
        if ( $$opts{chr_beg_end} && $col[3] ne '->'  ) { error("Could not parse $$opts{tlog}: $tlog\n"); }
        elsif ( !$$opts{chr_beg_end} && $col[2] ne '->'  ) { error("Could not parse $$opts{tlog}: $tlog\n"); }

        my $chr0 = $col[0];
        my $beg0 = $col[1];
        my $end0 = $$opts{chr_beg_end} ? "\t$col[2]" : '';
        my $chr1 = $$opts{chr_beg_end} ? $col[4] : $col[3];
        my $beg1 = $$opts{chr_beg_end} ? $col[5] : $col[4];
        my $end1 = $$opts{chr_beg_end} ? "\t$col[6]" : '';

        my ($chr,$beg,$end,$line);
        if ( exists($$opts{ichr}) )
        {
            my @ori = split(/\t/,$ori);
            chomp($ori[-1]);
            $chr = $ori[$$opts{ichr}];
            $beg = $ori[$$opts{ibeg}];
            $end = $$opts{chr_beg_end} ? "\t$ori[$$opts{iend}]" : '';
            $ori[$$opts{ichr}] = $chr1;
            $ori[$$opts{ibeg}] = $beg1;
            if ( $$opts{chr_beg_end} ) { $ori[$$opts{iend}] = $end1; }
            $line = join("\t",@ori)."\n";
        }
        elsif ( $$opts{is_bed} )
        {
            if ( !($ori=~/^(\S+)\t(\d+)\t(\d+)/) ) { error("Could not parse data on input: $ori"); }
            $chr = $1;
            $beg = $2;
            $end = "\t$3";
            $line = "$chr1\t$beg1$end1$'";
        }
        else
        {
            if ( !($ori=~/^(\S+)\t(\d+)/) ) { error("Could not parse data on input: $ori"); }
            $chr = $1;
            $beg = $2;
            $line = "$chr1\t$beg1$'";
        }
        if ( $chr ne $chr0 or $beg ne $beg0 or $end ne $end0 ) { error("The files $$opts{tlog} and $$opts{in_file} are out of sync:\n\t expected \"$chr0\t$beg0$end0\" got \"$chr\t$beg$end\"\n"); }
        print $line;
    }
    close($tlog_fh);
}



#--------------------------------

package Reader;
use strict;
use warnings;
use Carp;

sub Reader::new
{
    my ($class,%args) = @_;
    my $self = { %args };
    bless($self,$class);
    $$self{buffer} = [];
    if ( !exists($$self{file}) ) { $self->error("Expected 'file' parameter.\n"); }
    open($$self{fh},'<',$$self{file}) or $self->error("$$self{file}: $!"); 
    return $self;
}

sub Reader::error
{
    my ($self,@msg) = @_;
    confess @msg;
}

sub Reader::next_line
{
    my ($self) = @_;
    if ( @{$$self{buffer}} ) { return shift(@{$$self{buffer}}); }
    my $line;
    while (defined($line=readline($$self{fh})))
    {
        if ( $line=~/^#/ ) { next; }
        last;
    }
    if ( !defined($line) ) { return undef; }
    my @items = split(/\s+/,$line);
    $items[0] =~ s/^chr//;
    return \@items;
}

sub Reader::unread_line
{
    my ($self,$line) = @_;
    push @{$$self{buffer}}, $line;
}

