#!/usr/bin/env perl

=head1 NAME

vrtracking_tool

=head1 SYNOPSIS

 This tool is able to perform the following operations:
 1. Remove a lane, library, sample or study from disk and either 
     *reset all flags* for lane and file on the database, OR 
     *delete* the object from the database and all downstream objects.
 2. Sets up the lanes that need to have the specified stage of the pipeline performed again.
    It deletes the relevant files on disk and resets the lane processed flag for that stage to 0 
    (e.g. $lane->is_processed(qc => 0))

  Stages/objects currently implemented:
    -pipeline stages:  
      import
      qc
      genotype
      improved
      mapped
      snp_called
      assembled
      rna_seq_expression
      annotated
    -database/file objects:  
      lane
      library
      sample
      study

    Examples of use:
      Re-do pipeline stages:
         > Reimport bam files for a set of lanes: 
         vrtracking_tool -c $CONF/my_db.conf -s import <file of lane names to reimport> 
         
         > Recalculate the complete genotyping and qc for a set of lanes:
         vrtracking_tool -c $CONF/my_db.conf -s qc <file of lane names to redo qc>
          
         > Recalculate the genotyping only for a set of lanes:
         vrtracking_tool -c $CONF/my_db.conf -s genotype <file of lane names to redo genotype> 
          
         > Re-perform bam improvement for a set of lanes:
         vrtracking_tool -c $CONF/my_db.conf -s improved <file of lane names>
          
         > Re-perform snp_calling for a set of lanes:
         vrtracking_tool -c $CONF/my_db.conf -s snp_calling <file of lane names>      
      
      Delete or reset pipeline objects:
         > Reset all db flags and remove all files on disk for a lane:
         vrtracking_tool -c $CONF/my_db.conf -s lane <file of lane names to reimport>
    
         > Delete the lane and file from the database and delete the lane directory from disk:
         vrtracking_tool --config $CONF/my_db.conf --stage lane --delete <file of lane names to delete>

         > Reset all db flags and remove all lane-related files linked to a library from disk:
         vrtracking_tool -c $CONF/my_db.conf -s library <file of library hierarchy names to reimport>
         
         > Delete the library and all downstream objects (e.g. lanes and files) from the database and delete the library directory from disk:
         vrtracking_tool --config $CONF/my_db.conf --stage library --delete <file of library hierarchy names to delete>
         
         >> Delete and reset operations can also be performed for all lanes within a sample (-s sample) or a study (-s study)
         
         
    The database name and root directory of the lane hierarchy on disk can either be given on the command line 
    (--db vrtrack_db_name --root /lustre/scratch106/projects/uk10k/TRACKING/) or via a configuration file 
    (--config config.conf) as in the examples above. 
    
    The format for the configuration file is:
    
               root    => '/lustre/scratch101/sanger/jm23/TRACKING/',
               db      => 'vrtrack_jm23_neuro',
               [log     => '/lustre/scratch105/log/vrtracking_tool-jm23_neuro.log',] -> optional
    (Unless the -q or --quiet flag is used, the information concerning the files/directories deleted and the 
    database objects deleted/flags reset will be written to the log file if specified in the config file.)
 
  NOTE- the tool currently uses names for lanes and studies, hierarchy names for libraries, but only id numbers for samples, 
  e.g. it can accept the lane name 5659_2.
  
    There are 2 modes of operation. You can either provide a file of lane names or library hierarchy names 
    (one per line), or enter the interactive mode by omitting the file name from the command and enter the 
    names or ids individually, 
    e.g.       
         vrtracking_tool -c $CONF/my_db.conf -s import
         1234_5
         2345_8#5.....

    Summary of all flags implemented by this tool:
                        -----------       
              -c,   --config    <location of config file with root and db specified>
                        --- OR ----              
              -d,   --db        <specify db name>
              -r,   --root      <root directory for the analyses>          
                        ----------- 
              -s,   --stage     <stage of pipeline to be restarted>
              -q,   --quiet     <suppress output to stdout/logfile>
              -del, --delete    <use this flag to delete database entries rather than resetting flags>
              -f,   --filter    <filter by reference (mapping/snpcalling) or by assemblier (annotation/assembly)>
              -p,   --prefix    <filter mappings/snp_calling to this mapstats prefix - WARNING: This doesn't work reliably for all data>
              -t,   --test      <use this flag to try the tool without performing any delete/resetting operations>
              -h,   --help      <this message>
              
    To quit the tool, type quit (or q) on the command line.

=head1 AUTHOR

John Maslen, jm23@sanger.ac.uk, Team 145

=cut

use strict;
use warnings;
no warnings 'uninitialized';

use Data::Dumper;
use File::Path qw(remove_tree);
use Getopt::Long;
use Log::Log4perl qw(:easy);
use Scalar::Util qw(looks_like_number);
use VertRes::Utils::VRTrackFactory;
use VRTrack::Lane;
use Carp;
use VertRes::Utils::FileSystem;

my ( $config, $config_data, $stage, $help, $delete, $quiet, $root, $db, $test, $reference, $prefix, $assembler, $filter );

#values for $stage that involve *resetting* db flags and file deletion
my @stages = ( 'import', 'qc', 'genotype', 'improved', 'snp_called', 'assembled', 'mapped', 'rna_seq_expression', 'annotated' );

#values for $stage that can EITHER have flags reset as above, OR have VRTrack objects and whole directories deleted, depending on whether the --delete/-del flag is set)
my @entities = ( 'lane', 'library', 'sample', 'study' );

my %reset_stages = ();
foreach (@stages) {
    $reset_stages{$_} = $_;
}
$reset_stages{'genotype'} = 'qc';
foreach (@entities) {
    $reset_stages{$_} = 'all';
}

GetOptions(
    'c|config=s' => \$config,
    'd|db=s'     => \$db,
    'r|root=s'   => \$root,
    's|stage=s'  => \$stage,
    'del|delete' => \$delete,
    'q|quiet'    => \$quiet,
    't|test'     => \$test,
    'f|filter=s' => \$filter,
    'p|prefix=s' => \$prefix,
    'h|help'     => \$help,
);

# determine type of operation
my $stage_op  = grep { $_ eq $stage } @stages;
my $entity_op = grep { $_ eq $stage } @entities;
my $reset_stage = $reset_stages{$stage};

( ( ( $root && $db ) || $config ) && $stage && ( $stage_op || $entity_op ) && !$help ) or die <<USAGE;
    Usage: $0 <file of studies/libraries/lanes that need to be reimported or pipeline rerun>  
    
    NOTE:  The database name (--db) and tracking directory (--root) must be supplied either 
    on the command line, or via a configuration file (--config) in the form root => 'path', 
    db => 'db_name' [optionally log => 'path']. If, for some reason all 3 are specified, the 
    values given for db/root on the command line will override those in the config file.
                        -----------
             -c,   --config    <location of config file with root and db specified>
                        --- OR ----
             -d,   --db        <specify db name>
             -r,   --root      <root directory for the analyses>
                        -----------
             -s,   --stage     <stage of pipeline to be restarted>
             -q,   --quiet     <suppress output to stdout/logfile>
             -del, --delete    <use this flag to delete database entries rather than resetting flags>
             -f,   --filter    <filter by reference (mapping/snpcalling) or by assemblier (annotation/assembly)>
             -p,   --prefix    <filter mappings/snp_calling to this mapstats prefix - WARNING: This doesn't work reliably for all data>
             -t,   --test      <use this flag to try the tool without performing any delete/resetting operations>
             -h,   --help      <this message>

  This tool is able to perform the following operations:
  1. Remove a library, sample or study from disk and either 
      *reset all flags* for lane and file on the database, OR 
      *delete* the object from the database and all downstream objects.
  2. Sets up the lanes that need to have the specified stage of the pipeline performed again.
       It deletes the relevant files on disk and resets the lane processed flag for that stage to 0 
       (e.g. lane->is_processed(qc => 0))

  Stages/objects currently implemented:
    -pipeline stages:  
      import
      qc
      genotype
      improved
      mapped
      snp_called
      assembled
      rna_seq_expression
      annotated
    -database/file objects:  
      lane
      library
      sample
      study
      
Examples:
  Delete mappings/ snp calling for 1 reference but leave the others.
    vrtracking_tool -f RefName -s (mapped|snp_called) -d pathogen_prok_track -r  /lustre/.../seq-pipelines file_of_lanes
  
  Delete mappings/snp calling which match a given prefix from the mapping config file, but leaves the others.
    vrtracking_tool -p '_123_456_' -s (mapped|snp_called) -d pathogen_prok_track -r  /lustre/.../seq-pipelines file_of_lanes

USAGE

$quiet ? Log::Log4perl->easy_init($ERROR) : Log::Log4perl->easy_init($INFO);
my $logger = get_logger();

if ($config) {
    $config_data = get_config_data($config);
    $root        = $$config_data{root} unless ($root);
    $db          = $$config_data{db} unless ($db);
    if ( $$config_data{log} ) {
        my $layout;
        if ($test) {
            $layout = Log::Log4perl::Layout::PatternLayout->new("TEST: %m%n");
        }
        else {
            $layout = Log::Log4perl::Layout::PatternLayout->new("%d %p> %m%n");
        }
        my $appender = Log::Log4perl::Appender->new(
            "Log::Dispatch::File",
            filename => $$config_data{log},
            mode     => "append",
        );
        $appender->threshold($INFO);
        $appender->layout($layout);
        $logger->add_appender($appender);
    }
}

if ( '/' ne substr $root, -1, 1 ) {
    $root = $root . '/';
}
croak "Root directory $root does not exist" unless ( -e $root );

my $vrtrack = VertRes::Utils::VRTrackFactory->instantiate(
    database => $db,
    mode     => 'rw'
);
croak "Can't connect to tracking database" unless ($vrtrack);

my $fsu = VertRes::Utils::FileSystem->new( reconnect_db => 1 );

if ( $delete && !$entity_op ) {
    croak "--stage can not be set to $stage if the delete flag is used (only lane, library, sample or study).";
}

if ( defined($filter) ) {
    if ( $stage eq 'mapped' || $stage eq 'snp_called' || $stage eq 'rna_seq_expression' ) {
        $reference = $filter;
    }
    elsif ( $stage eq 'assembled' || $stage eq 'annotated' ) {
        $assembler = $filter;
    }
}

# get input from file of study/library/lane names or stdin
while (<>) {
    next if /^(\s)*$/;
    my $vrinput = $_;
    chomp $vrinput;
    exit 0 if ( lc($vrinput) eq 'quit' || lc($vrinput) eq 'q' );
    $logger->info( "--------------------------------------"
          . ( $delete ? "$stage db object and directory deletion on disk" : "$stage db flag reset and file deletion on disk" )
          . "--------------------------------------" );

    #initialise VRTrack objects for the operation specified in $stage
    my @vrobjects = get_vrtrack_objects( $vrtrack, $vrinput, $stage );
    unless (@vrobjects) {
        $logger->error("Unable to get VRTrack object $vrinput");
        next;
    }
    for my $vrobject (@vrobjects) {

        #initialise the directory for the operations
        my $vrdirectory = $root . get_vrtrack_directory( $vrtrack, $vrobject );
        unless ($vrdirectory) {
            $logger->error("Unable to get the tracking directory for $vrinput");
            next;
        }

        #for delete operations (delete objects from db and directories from disk)
        if ($delete) {

            #to die or report and continue?....
            unless ($test) { $vrobject->delete() or croak "Unable to delete the VRTrack object $vrinput, error = $!\n" }
            $logger->info( "The $stage " . $vrobject->name() . " and all child objects have been deleted from the database" );
            if ( -d $vrdirectory ) {
                unless ($test) { remove_tree($vrdirectory) or croak "Unable to delete the directory $vrdirectory\n" }

                #add {keep_root => 1} to remove_tree call if the directory needs to be kept
                $logger->info( "The directory for the $stage " . $vrobject->name() . " has been deleted on disk" );
            }
            else {
                $logger->error("The directory $vrdirectory does not exist");
            }
        }

        #for recalculation operations (reset flags on db and delete files from disk)
        else {
            my @mapping_ids;
            my $qcdir = $vrdirectory . '/qc-sample/';
            my %mapstats_id_to_obj;

            for my $mapping_obj ( @{ $vrobject->mappings() } ) {
                next if ( $stage ne 'qc' && $mapping_obj->is_qc() == 1 );
                $mapstats_id_to_obj{ $mapping_obj->id() } = $mapping_obj;
            }
            my $number_non_qc_mappings = keys %mapstats_id_to_obj;

            # Filter the mapping_ids to a single referece, ignoring QC mappings
            if ( defined($reference) ) {
                for my $mapping_obj ( values %mapstats_id_to_obj ) {
                    my $assembly_obj = $mapping_obj->assembly();
                    if ( $reference eq $assembly_obj->name() ) {
                        push( @mapping_ids, $mapping_obj->id() );
                    }
                }
            }
            else {
                @mapping_ids = sort { $b <=> $a } keys %mapstats_id_to_obj;
            }

            # These stages dont need the mapstats so just give a dummy value so that it only runs once.
            if (   $stage eq 'import'
                || $stage eq 'qc'
                || $stage eq 'genotype'
                || $stage eq 'all'
                || $stage eq 'assembled'
                || $stage eq 'annotated' )
            {
                @mapping_ids = (1);
            }

            for my $mapstats_id (@mapping_ids) {

                next if ( defined($prefix) && defined($mapstats_id_to_obj{$mapstats_id}) && $prefix ne $mapstats_id_to_obj{$mapstats_id}->prefix );
                my $mapping_prefix = $prefix || '[0-9_]+';

                my $default_assembler = 'velvet';
                my $assembler_regex = $assembler || "[[:alpha:]]*";
                my $annotation_regex = "([[:alpha:]]*_ann|annotate)";
                if ($assembler_regex eq $default_assembler)
                {
                    $annotation_regex = 'annotate';
                }
                elsif ($assembler)
                {
                    $annotation_regex = $assembler_regex . '_ann';
                }

                my %files_deleted = (
                    import   => [],
                    qc       => [
			"^qc-sample\$",
			"kraken\.report\$"
		    ],
                    genotype => [
                        "^$qcdir\/$vrinput\.gtype\$",
                        "^$qcdir\/$vrinput\.gtype(x|y)\$",
                        "^$qcdir\/$vrinput\.glf\$",
                        "^$qcdir\/_$vrinput\_glf\.(o|e)\$"
                    ],
                    improved => [
                        "^${mapstats_id}\.[ps]e\.realigned\.sorted\.bam\.recal_data\.csv\$",
                        "^${mapstats_id}\.[ps]e\.realigned\.sorted\.recal\.calmd\.bam",
                        "^${mapstats_id}\.[ps]e\.realigned\.sorted\.recal\.calmd\.intervals\.(?!snp\$)",
                        "^\.realign\_complete\_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\$",
                        "^\.recalibrate\_complete\_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\$",
                        "^\.sort\_complete\_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\$",
                        "^\.rewrite\_header\_complete\_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\$"
                    ],
                    snp_called => [
                        "^${mapstats_id}\.[ps]e\.realigned\.sorted\.recal\.calmd\.intervals\.snp\$",
                        "^${mapstats_id}\.[ps]e\.markdup\.snp\$",
                        "^${mapstats_id}\.[ps]e\.raw\.sorted\.snp\$"
                    ],
                    mapped => [
                        "^\.${mapping_prefix}mark_duplicates_[ps]e_${mapstats_id}\.[oe].archive\$",
                        "^\.${mapping_prefix}statistics_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\.[oe]\.archive\$",
                        "^\.${mapping_prefix}merge_[ps]e_${mapstats_id}\.[oe]\.archive\$",
                        "^\.${mapping_prefix}map_[ps]e_${mapstats_id}_[0-9]+\.[oe]\.archive\$",
                        "^\.${mapping_prefix}split_[ps]e_${mapstats_id}\.[oe]\.archive\$",
                        "^${mapstats_id}\.[ps]e\.markdup\.bam\$",
                        "^${mapstats_id}\.[ps]e\.markdup\.bam\.bai\$",
                        "^${mapstats_id}\.[ps]e\.raw\.sorted\.bam\$",
                        "^${mapstats_id}\.[ps]e\.raw\.sorted\.bam_graphs\$",
                        "^${mapstats_id}\.[ps]e\.raw\.sorted\.bam\.(cover|bc|bas|flagstat|tmp|bad|bai|checked)\$",
			"^\.mapping_complete_[ps]e_${mapstats_id}\$",
                        "^\.split_complete_[ps]e_${mapstats_id}\$",
                        "^${mapping_prefix}split_[ps]e_${mapstats_id}\.([oe]|pl)\$",
                        "^split_[ps]e_${mapstats_id}\$",
			"^${mapping_prefix}_job_status\$",
                        "^${mapping_prefix}map_[ps]e_${mapstats_id}_[0-9]+\.[oe](\.previous)?\$",
                        "^${mapping_prefix}merge_[ps]e_${mapstats_id}\.([oe](\.previous)?|pl)\$",
                        "^${mapping_prefix}statistics_${mapstats_id}\.[ps]e\.raw\.sorted\.bam\.([oe](\.previous)?|pl)\$",
                        "^${mapping_prefix}mark_duplicates_[ps]e_${mapstats_id}\.([oe](\.previous)?|pl)\$",
                        "^${mapping_prefix}split.jids\$"
                    ],
                    all => ["^[\\w]+"],

                    assembled => [    #Files from pool fastqs stage
                        "^(_${assembler_regex})+_pool_fastqs_done\$",
                        "^(_${assembler_regex})+_pool_fastqs\.(e|o|pl)\$",
                        "^pool_1\.fastq\.gz\$",
                        "^(_${assembler_regex})+_pool_fastq_tmp_files\$",

                        #Files from optimise parameters stage. Changed to cope with different assemblers. 4 June 2013
                        "^(_${assembler_regex})+_optimise_parameters\.(e|o|pl|jids)\$",
                        "^(_${assembler_regex})+_optimise_parameters_done\$",
                        "^${assembler_regex}_assembly_logfile\.txt\$",
                        "^${assembler_regex}_assembly\$",
                        "^forward\.fastq\$",
                        "^reverse\.fastq\$",

                        #Files from map back stage
                        "^${assembler_regex}_map_back\.(e|o|pl|jids)\$",
                        "^${assembler_regex}_map_back_done\$",

                        #Files from assembly improvement stage
                        "^(_${assembler_regex})+_assembly_improvement\.(e|o|pl|jids)\$",
                        "^(_${assembler_regex})+_assembly_improvement_done\$",

                        #Files from update db and clean up stages
                        "^_${assembler_regex}_assembly_cleanup_done\$",
                        "^_${assembler_regex}_assembly_update_db_done\$",
                        "^_${assembler_regex}_assembly_job_status\$",
                        "^_${default_assembler}_job_status\$",

                        # Done/failed files from circularisation & pacbio assembly
                        "${assembler_regex}_circlator_failed\$",
                        "${assembler_regex}_quiver_failed\$",
                        "${assembler_regex}_circularise_done\$",
                        "${assembler_regex}_pacbio_assembly_done\$",
                        "${assembler_regex}_pacbio_assembly\.(e|o|pl|jids)\$",

                        # Done/failed files from iva_qc
                        "${assembler_regex}_iva_qc_failed\$",
                        "${assembler_regex}_iva_qc_done\$",
                    ],
                    rna_seq_expression => [
                        "^${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam\.corrected\.bam",
                        "^${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam\.expression\.csv\$",
                        "^${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam\.featurecounts.csv",
                        "^${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam.*\.coverageplot\.gz",
                        "^${mapping_prefix}${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam\_calculate\_expression\.(e|o|pl)\$",
                        "^${mapping_prefix}${mapstats_id}\.[ps]e\.(markdup|raw\.sorted)\.bam\_calculate\_expression_done\$"
                        #"^${mapping_prefix}_job_status\$",
                        #"^${mapping_prefix}calculate\_expression\.jids\$",
                        #"^${mapping_prefix}rna\_seq\_update\_db\_done\$",
                        #"^${mapping_prefix}rna\_seq\_cleanup\_done\$"
                    ],
                    annotated => [
                        "^_${annotation_regex}_annotate\_assembly\.(e|o|pl|jids)\$",
                        "^_${annotation_regex}_annotate\_cleanup\_done\$",
                        "^_${annotation_regex}_annotate\_update\_db\_done\$",
                        "^_${annotation_regex}_annotate\_assembly\_done\$",
                        "^_${annotation_regex}_job_status\$",
                        "^${assembler_regex}_assembly\/annotation\$"
                    ],
                );

                my @files_del = $entity_op ? @{ $files_deleted{$reset_stage} } : @{ $files_deleted{$stage} };

                my %allowed_processed_flags = $vrobject->allowed_processed_flags();
                my @reset_flags             = ( $reset_stage eq 'all' ? keys %allowed_processed_flags : $reset_stage );
                my @reset_objects           = ($vrobject);
                push @reset_objects, get_reset_flag_objects( $vrtrack, $reset_stage, $vrobject );

                # Read files in top level directory
                opendir DIR, $vrdirectory or croak "cannot open dir $vrdirectory: $!";
                my @current_files = readdir DIR;
                closedir DIR || die "error whilst reading $vrdirectory: S!";

                #delete files on disk if found in @files_del
                foreach my $file (@current_files) {

                    my $filepath = File::Spec->catfile( $vrdirectory, $file );
                    if ( grep { $file =~ m{$_} } @files_del ) {
                        if ( -d $filepath ) {
                            unless ($test) { remove_tree($filepath) or die "Unable to delete the directory $filepath, error = $!\n" }

                            if ( $fsu->file_exists($filepath) ) {
                                unless ($test) {
                                    if ($fsu->file_exists( $filepath, recurse => 1, wipe_out => 1 ) != 0)
                                    {
                                        die "Unable to delete the directory $filepath from fsu database, error = $!\n";
                                    }
                                }
                            }
                            $logger->info( "Removed directory: ", $filepath );
                        }
                        elsif ( -e $filepath || ( !-e $filepath && -l $filepath ) ) {
                            unless ($test) { unlink $filepath or die "Unable to delete $filepath, error = $!\n" }
                            if ( $fsu->file_exists($filepath) ) {
                                unless ($test) {
                                    if ($fsu->file_exists( $filepath, wipe_out => 1 ) != 0)
                                    {
                                        die "Unable to delete $filepath from fsu database, error = $!\n";
                                    }
                                }
                            }
                            $logger->info( "Deleted: ", $filepath );
                        }
                    }

                    if ( -d $filepath ) {

                        # Read files in this subdirectory and add them to the list
                        if ($file eq "." || $file eq "..")
                        {
                            next;
                        }
                        opendir DIR, $filepath or croak "cannot open dir $filepath: $!";
                        my @most_current_files = readdir DIR;
                        foreach my $most_current_file (@most_current_files)
                        {
                            unless ($most_current_file eq "." || $most_current_file eq "..")
                            {
                                push(@current_files, $file . "/" . $most_current_file);
                            }
                        }
                        closedir DIR || die "error whilst reading $filepath: S!";
                    }
                }

                #update database for lane (and file if appropriate)
                for my $reset_obj (@reset_objects) {
                    for my $flag (@reset_flags) {
                        unless ($test) {

                            if ( ( $reset_stage eq 'mapped' || $reset_stage eq 'snp_called' ) && $number_non_qc_mappings > 1 ) {
                                $logger->info( "Not resetting flag '"
                                      . $flag
                                      . "' for multiple mappings mapstats ID "
                                      . $mapstats_id
                                      . " and lane "
                                      . $reset_obj->name() );
                            }
                            else {
                                $reset_obj->is_processed( $flag => 0 );
                            }
                            if ( ( $reset_stage eq 'qc' || $reset_stage eq 'mapped' || $reset_stage eq 'all' )
                                && $reset_obj->isa('VRTrack::Lane') )
                            {
                                $reset_obj->genotype_status('unchecked') unless $reset_stage eq 'mapped';

                                if ( defined( $mapstats_id_to_obj{$mapstats_id} ) ) {
                                    if ( delete_mapstats_entries( $reset_obj, $flag, $mapstats_id_to_obj{$mapstats_id} ) ) {
                                        $logger->info( "Deleted " . $mapstats_id . " mapstats for the lane " . $reset_obj->name() );
                                    }
                                }
                            }
                            $reset_obj->update;
                        }
                    }
                }
                $logger->info( "Processed flag for "
                      . join( ', ', @reset_flags )
                      . " has been reset to 0 for the "
                      . ( ( $reset_stage eq 'import' || $reset_stage eq 'all' ) ? "lane and bam file of " : "lane " )
                      . $vrobject->name );
            }
        }
    }
}

sub get_vrtrack_objects {
    my ( $vrtrack, $vrinput, $stage ) = @_;
    my @vrobjects;
    my $object;
    my @lanearray;
    if ( $stage eq 'study' ) {
        $object = $object = VRTrack::Project->new_by_name( $vrtrack, $vrinput );
        my $samples = $object->samples();
        for my $sample ( @{$samples} ) {
            my $libraries = $sample->libraries();
            for my $library ( @{$libraries} ) {
                push @lanearray, @{ $library->lanes() };
            }
        }
    }
    elsif ( $stage eq 'sample' ) {
        $object = VRTrack::Sample->new( $vrtrack, $vrinput );
        my $libraries = $object->libraries();
        for my $library ( @{$libraries} ) {
            push @lanearray, @{ $library->lanes() };
        }
    }
    elsif ( $stage eq 'library' ) {
        $object = VRTrack::Library->new_by_hierarchy_name( $vrtrack, $vrinput );
        push @lanearray, @{ $object->lanes() };
    }
    else {
        $object = VRTrack::Lane->new_by_name( $vrtrack, $vrinput );
        push @lanearray, $object;
    }
    if ($delete) {
        push @vrobjects, $object;
    }
    else {
        push @vrobjects, @lanearray;
    }
    return @vrobjects;
}

sub get_vrtrack_directory {
    my ( $vrtrack, $vrobject ) = @_;

    my %recognised_type = (
        'VRTrack::Project' => 1,
        'VRTrack::Sample'  => 1,
        'VRTrack::Library' => 1,
        'VRTrack::Lane'    => 1
    );

    # Check object
    croak "Unable to retrieve the tracking directory as the tracking object is not defined.\n" unless defined $vrobject;
    croak "Unable to retrieve the tracking directory as the tracking object type is not recognised.\n"
      unless $recognised_type{ ref($vrobject) };

    my $vrtrack_directory = $vrtrack->hierarchy_path_of_object($vrobject);
    croak "Unable to retrieve the tracking directory as could not build hierarchy path for tracking object.\n"
      unless defined $vrtrack_directory;

    return $vrtrack_directory;
}

sub get_reset_flag_objects {
    my ( $vrtrack, $stage, $vrobject ) = @_;
    my @return_objects = ();
    if ( ( $stage eq 'import' || $stage eq 'all' ) && $vrobject->isa('VRTrack::Lane') ) {
        for my $file ( @{ $vrobject->files() } ) {
            push @return_objects, $file;
        }
    }
    return @return_objects;
}

sub get_config_data {
    my ($file) = @_;

    open( my $fh, '<', $file ) or croak("$file: $!");
    my @lines = <$fh>;
    close($fh) or croak("$file: $!");

    my %data;
    eval '%data=(' . join( '', @lines ) . ')';

    if ($@)             { croak("$file: $@\n"); }
    if ( !$data{root} ) { croak("Error: missing the 'root' parameter in $file\n"); }
    if ( !$data{db} )   { croak("Error: missing the 'db' parameter in $file\n"); }

    return \%data;
}

sub delete_mapstats_entries {
    my ( $lane, $stage, $mapstats_obj ) = @_;

    # Check lane
    croak "Cannot delete mapstats as lane is undefined\n" unless defined $lane;
    croak "Cannot delete mapstats as object type is not lane\n" unless $lane->isa('VRTrack::Lane');

    # Skip getting mapstats unless qc and mapping
    my %mapstats_stage = ( 'qc' => 1, 'mapped' => 1 );
    return 0 unless $mapstats_stage{$stage};

    # Get mappings
    my @mappings = ();
    push( @mappings, @{ $lane->qc_mappings() } ) if ( $stage eq 'qc' );
    push( @mappings, $mapstats_obj )             if ( $stage eq 'mapped' );

    # Delete mappings
    for my $mapstats (@mappings) {
        $mapstats->delete() or croak "Unable to delete mapstats for " . $lane->name() . ", error = $!\n";
    }

    # Return number of mapstats deleted
    return scalar(@mappings);
}
