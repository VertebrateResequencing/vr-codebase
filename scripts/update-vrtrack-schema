#!/usr/bin/env perl

use strict;
use warnings;
use Carp;
use Getopt::Long;
use VRTrack::Lane;
use VRTrack::Factory;

my $sql_file;
my $old = 0;
my $warn = 0;
my $help = 0;
GetOptions ("sql|s=s" => \$sql_file,
            "old|o" => \$old,
            "warn|w" => \$warn,
            "help|h" => \$help);

if (! $sql_file || $help) {
    unless ($help) {
        warn "Missing the -s option.\n";
    }
    die "Usage: update-vrtrack-schema [OPTIONS] [database names]\n",
        "(without any database names, defaults to all databases on the server, modified by -o)\n",
        "Options:\n",
        "   -s, --sql <file>                 File with SQL commands to be performed for each of the database (required).\n",
        "   -o, --old                        Only default to databases that have old schema version numbers.\n",
        "   -w, --warn                       Only warn on execute errors, don't die.\n",
        "   -h, --help                       This help message.\n";
}

my @dbs;
if (@ARGV) {
    @dbs = @ARGV;
    chomp($dbs[-1]);
}
else {
    @dbs = VRTrack::Factory->databases(1, $old);
}

my $sqls = read_sqls($sql_file);
for my $db (@dbs) {
    next if $db eq 'test';
    run_sqls($db,$sqls);
}

exit;

#--------------------------------

sub error
{
    if ($warn) {
        carp @_;
    }
    else {
        croak @_;
    }
}

sub init_db
{
    my ($dbname) = @_;
    my %cd = VRTrack::Factory->connection_details('rw');
    my $dbh = DBI->connect("dbi:mysql:$dbname;host=$cd{host};port=$cd{port}", $cd{user}, $cd{password}, { RaiseError => 0 });
    if ( !$dbh ) { error("Unable to connect.\n"); }
    return $dbh;
}

sub mysql_query
{
    my ($args,$query) = @_;

    if ( $args && $$args{'verbose'} ) { print STDERR "$query\n"; }

    my $sth = $$args{dbh}->prepare($query);
    if ( !$sth ) { error("$query:\n", $!) }
    $sth->execute or error("$query:\n", $!);
    return $sth;
}


# empty lines are ignored, multilines can be escaped by \
sub read_sqls
{
    my ($fname) = @_;

    open(my $fh,'<',$fname) or error("$fname: $!"); 
    my @sqls;
    my $buf;
    while (my $line=<$fh>)
    {
        if ( $line=~/^\s*$/ ) { next; }
        chomp($line);
        if ( $line =~m{\\\s*$} )
        {
            $buf .= $`;
            next;
        }
        if ( $buf ) 
        { 
            $line = $buf . $line; 
            $buf=undef; 
        }
        push @sqls,$line;
    }
    close($fh);
    return \@sqls;
}


sub run_sqls
{
    my ($db,$sqls) = @_;

    print STDERR "$db\n";
    my $dbh = init_db($db);
    for my $sql (@$sqls)
    {
        mysql_query({dbh=>$dbh, verbose=>1}, $sql);
    }
}


